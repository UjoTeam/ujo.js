{"version":3,"sources":["../src/index.js"],"names":["HASH_PREAMBLE","DEPOSIT_MINIMUM_WEI","ethers","utils","parseEther","HUB_EXCHANGE_CEILING","opts","headers","Authorization","withCredentials","Card","cb","address","web3","connext","tokenAddress","tokenContract","channelState","connextState","stateUpdateCallback","exchangeRate","hubUrl","rpcProvider","mnemonic","localStorage","getItem","delegateSigner","getAddressString","setWeb3","setConnext","setTokenContract","authorizeHandler","pollConnextState","poller","rpcUrl","providerOpts","ProviderOptions","approving","provider","customWeb3","Web3","options","user","eth","Contract","tokenAbi","e","console","log","that","on","state","persistent","channel","balance","balanceTokenUser","runtime","rates","USD","start","autoDeposit","autoSwap","setInterval","getBalance","tokenBalance","methods","balanceOf","call","net","getId","message","warn","bigNumberify","lte","canDeposit","actualDeposit","amountWei","sub","toString","amountToken","deposit","depositRes","canExchange","weiBalance","BN","balanceWeiUser","gt","exchange","axios","post","challengeRes","data","sha3","nonce","hash","personal","sign","signature","origin","authRes","token","document","cookie","get","res","value","Number","isNaN","Error","payment","meta","purchaseId","payments","type","recipient","emptyAddress","secret","generateSecret","amount","Math","pow","paymentHandler","recipientAddress","paymentAmount","balanceError","isZero","isAddress","addressError","errorMessage","buy","paymentRes","redeem","dai","substr","cents","substring","length"],"mappings":"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","sourcesContent":["import 'babel-polyfill';\nimport { getConnextClient } from 'connext/dist/Connext';\nimport axios from 'axios';\nimport Web3 from 'web3';\nimport { ethers } from 'ethers';\nimport { emptyAddress } from 'connext/dist/Utils';\nimport { convertPayment } from 'connext/dist/types';\nimport BN from 'bn.js';\n\nimport ProviderOptions from './utils/ProviderOptions';\nimport clientProvider from './utils/web3/clientProvider';\nimport { getDollarSubstring } from './utils/getDollarSubstring';\nimport createWallet from './walletGen';\nimport tokenAbi from './abi/humanToken.json';\n\n// set constants\nconst HASH_PREAMBLE = 'SpankWallet authentication message:';\nconst DEPOSIT_MINIMUM_WEI = ethers.utils.parseEther('0.03'); // 30 FIN\nconst HUB_EXCHANGE_CEILING = ethers.utils.parseEther('69'); // 69 TST\nconst opts = {\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8',\n    Authorization: 'Bearer foo',\n  },\n  withCredentials: true,\n};\n\n// define class\nclass Card {\n  constructor(cb) {\n    // remove from a 'state'\n    // object and list under `this`\n    this.address = '';\n    this.web3 = {};\n    this.connext = {};\n    this.tokenAddress = null;\n    this.tokenContract = null;\n    this.channelState = null;\n    this.connextState = null;\n    this.stateUpdateCallback = cb;\n    this.exchangeRate = '0.00';\n    this.hubUrl = null;\n    this.rpcProvider = null;\n  }\n\n  // TODO: take in mnemonic so that users can\n  // generate wallet from another dapplication\n  async init(hubUrl = 'http://localhost:8080', rpcProvider = 'http://localhost:8545') {\n    // Set up wallet\n    const mnemonic = localStorage.getItem('mnemonic');\n    const delegateSigner = await createWallet(mnemonic);\n    const address = await delegateSigner.getAddressString();\n    this.address = address;\n    this.hubUrl = hubUrl;\n    this.rpcProvider = rpcProvider;\n\n    // set up web3 and connext\n    await this.setWeb3(delegateSigner, rpcProvider);\n    await this.setConnext(hubUrl);\n    await this.setTokenContract();\n    await this.authorizeHandler();\n\n    // start polling for state\n    await this.pollConnextState();\n    await this.poller();\n\n    // return address\n    return address;\n  }\n\n  // ************************************************* //\n  //                State setters                      //\n  // ************************************************* //\n  async setWeb3(address, rpcUrl) {\n    const providerOpts = new ProviderOptions(address, rpcUrl).approving();\n    const provider = clientProvider(providerOpts);\n    const customWeb3 = new Web3(provider);\n    this.web3 = customWeb3;\n  }\n\n  async setConnext(hubUrl) {\n    const options = {\n      web3: this.web3,\n      hubUrl,\n      user: this.address,\n    };\n\n    // *** Instantiate the connext client ***\n    const connext = await getConnextClient(options);\n    // console.log(`Successfully set up connext! Connext config:`);\n    // console.log(`  - tokenAddress: ${connext.opts.tokenAddress}`);\n    // console.log(`  - hubAddress: ${connext.opts.hubAddress}`);\n    // console.log(`  - contractAddress: ${connext.opts.contractAddress}`);\n    // console.log(`  - ethNetworkId: ${connext.opts.ethNetworkId}`);\n    this.connext = connext;\n    this.tokenAddress = connext.opts.tokenAddress;\n  }\n\n  async setTokenContract() {\n    try {\n      const tokenContract = new this.web3.eth.Contract(tokenAbi, this.tokenAddress);\n      this.tokenContract = tokenContract;\n    } catch (e) {\n      console.log('Error setting token contract', e); // eslint-disable-line\n    }\n  }\n\n  // ************************************************* //\n  //                    Pollers                        //\n  // ************************************************* //\n  async pollConnextState() {\n    const that = this;\n    // register listeners\n    this.connext.on('onStateChange', state => {\n      if (state.persistent.channel) {\n        const balance = state.persistent.channel.balanceTokenUser;\n        // balance is in Dai, return via callback so app/service can process usd amount\n        that.stateUpdateCallback(balance);\n      }\n\n      that.channelState = state.persistent.channel;\n      that.connextState = state;\n      that.exchangeRate = state.runtime.exchangeRate ? state.runtime.exchangeRate.rates.USD : 0;\n    });\n    // start polling\n    await this.connext.start();\n  }\n\n  async poller() {\n    await this.autoDeposit();\n    await this.autoSwap();\n\n    setInterval(async () => {\n      await this.autoDeposit();\n      await this.autoSwap();\n    }, 10000);\n  }\n\n  async autoDeposit() {\n    const { connextState, tokenAddress, address, exchangeRate } = this;\n    const balance = await this.web3.eth.getBalance(address);\n    let tokenBalance = '0';\n\n    try {\n      tokenBalance = await this.tokenContract.methods.balanceOf(address).call();\n    } catch (e) {\n      console.warn(\n        `Error fetching token balance, are you sure the token address (addr: ${tokenAddress}) is correct for the selected network (id: ${await this.web3.eth.net.getId()}))? Error: ${\n          e.message\n        }`,\n      );\n    }\n\n    if (balance !== '0' || tokenBalance !== '0') {\n      // don't autodeposit anything under the threshold\n      if (ethers.utils.bigNumberify(balance).lte(DEPOSIT_MINIMUM_WEI)) return;\n\n      // only proceed with deposit request if you can deposit\n      if (!connextState || !connextState.runtime.canDeposit || exchangeRate === '0.00') return;\n\n      const actualDeposit = {\n        amountWei: ethers.utils\n          .bigNumberify(balance)\n          .sub(DEPOSIT_MINIMUM_WEI)\n          .toString(),\n        amountToken: tokenBalance,\n      };\n\n      if (actualDeposit.amountWei === '0' && actualDeposit.amountToken === '0') {\n        // console.log(`Actual deposit is 0, not depositing.`);\n        return;\n      }\n\n      const depositRes = await this.connext.deposit(actualDeposit); // eslint-disable-line\n      // console.log(`Depositing: ${JSON.stringify(actualDeposit, null, 2)}`);\n      // console.log(`Deposit Result: ${JSON.stringify(depositRes, null, 2)}`);\n    }\n  }\n\n  // swapping wei for dai\n  async autoSwap() {\n    const { channelState, connextState } = this;\n    if (!connextState || !connextState.runtime.canExchange) return;\n\n    const weiBalance = new BN(channelState.balanceWeiUser);\n    const tokenBalance = new BN(channelState.balanceTokenUser);\n    if (channelState && weiBalance.gt(ethers.utils.bigNumberify('0')) && tokenBalance.lte(HUB_EXCHANGE_CEILING)) {\n      // console.log(`Exchanging ${channelState.balanceWeiUser} wei`); // eslint-disable-line\n      await this.connext.exchange(channelState.balanceWeiUser, 'wei');\n    }\n  }\n\n  // ************************************************* //\n  //                    Handlers                       //\n  // ************************************************* //\n  async authorizeHandler() {\n    const { web3 } = this;\n    const challengeRes = await axios.post(`${this.hubUrl}/auth/challenge`, {}, opts);\n\n    const data = `${HASH_PREAMBLE} ${web3.utils.sha3(challengeRes.data.nonce)} ${web3.utils.sha3('localhost')}`;\n    const hash = web3.utils.sha3(data);\n    const signature = await web3.eth.personal.sign(hash, this.address, null);\n\n    try {\n      const authRes = await axios.post(\n        `${this.hubUrl}/auth/response`,\n        {\n          nonce: challengeRes.data.nonce,\n          address: this.address,\n          origin: 'localhost',\n          signature,\n        },\n        opts,\n      );\n      const { token } = authRes.data;\n      document.cookie = `hub.sid=${token}`;\n      // console.log(`hub authentication cookie set: ${token}`);\n      const res = await axios.get(`${this.hubUrl}/auth/status`, opts);\n      // console.log('res', res.data);\n      // console.log(`Auth status: ${JSON.stringify(res.data)}`);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  // ************************************************* //\n  //                  Send Funds                       //\n  // ************************************************* //\n  async generateRedeemableLink(value) {\n    const { connext } = this;\n    if (Number.isNaN(value)) throw new Error('Value is not a number');\n\n    // generate secret, set type, and set\n    // recipient to empty address\n    const payment = {\n      meta: { purchaseId: 'payment' },\n      payments: [{\n        type: 'PT_LINK',\n        recipient: emptyAddress,\n        secret: connext.generateSecret(),\n        amount: {\n          amountToken: (value * Math.pow(10, 18)).toString(),\n          amountWei: '0',\n        },\n      }]\n    };\n\n    return this.paymentHandler(payment);\n  }\n\n  async generatePayment(value, recipientAddress) {\n    const { connext } = this;\n    if (Number.isNaN(value)) throw new Error('Value is not a number');\n\n    // generate secret, set type, and set\n    const payment = {\n      meta: { purchaseId: 'payment' },\n      payments: [{\n        type: 'PT_CHANNEL',\n        recipient: recipientAddress,\n        secret: connext.generateSecret(),\n        amount: {\n          amountToken: (value * Math.pow(10, 18)).toString(),\n          amountWei: '0',\n        },\n      }],\n    };\n\n    return this.paymentHandler(payment);\n  }\n\n  // returns true on a successful payment to address\n  // return the secret on a successful link generation\n  // otherwise throws an error\n  async paymentHandler(payment) {\n    const { connext, web3, channelState } = this;\n    // const { connext, web3, channelState } = this.props;\n\n    // console.log(`Submitting payment: ${JSON.stringify(payment, null, 2)}`);\n    let balanceError, addressError;\n\n    // validate that the token amount is within bounds\n    const paymentAmount = convertPayment('bn', payment.payments[0].amount);\n    if (paymentAmount.amountToken.gt(new BN(channelState.balanceTokenUser))) {\n      balanceError = 'Insufficient balance in channel';\n    }\n\n    if (paymentAmount.amountToken.isZero() ) {\n      balanceError = 'Please enter a payment amount above 0';\n    }\n\n    // validate recipient is valid address OR the empty address\n    // TODO: handle in other functions that structure payment object\n    const { recipient } = payment.payments[0];\n    if (!web3.utils.isAddress(recipient) && recipient !== emptyAddress) {\n      addressError = 'Please choose a valid address';\n    }\n\n    // return if either errors exist\n    if (balanceError || addressError) {\n      const errorMessage = balanceError || addressError;\n      throw new Error(errorMessage);\n    }\n\n    // otherwise make payment\n    try {\n      let paymentRes = await connext.buy(payment);\n      // console.log(`Payment result: ${JSON.stringify(paymentRes, null, 2)}`);\n      if (payment.payments[0].type === 'PT_LINK') {\n        return payment.payments[0].secret;\n      }\n      return true;\n    } catch (e) {\n      throw new Error(e);\n    }\n  }\n\n  async redeemPayment(secret) {\n    const { connext, channelState, connextState } = this;\n    if (!connext || !channelState || !connextState) throw new Error('Connext not configured');\n\n    if (!secret) throw new Error('No secret detected, cannot redeem payment.');\n\n    // user is not payor, can redeem payment\n    try {\n      return connext.redeem(secret);\n    } catch (e) {\n      throw new Error(e);\n    }\n  }\n\n  // ************************************************* //\n  //                    Helper                         //\n  // ************************************************* //\n  convertDaiToUSDString(dai) {\n    // const balance = state.persistent.channel.balanceTokenUser;\n    const substr = dai ? getDollarSubstring(dai) : ['0', '00'];\n    let cents = substr[1].substring(0, 2);\n    if (cents.length === 1) cents = `${cents}0`;\n    return `${substr[0]}.${cents}`;\n  }\n}\n\nexport default Card;\n"],"file":"index.js"}