{"version":3,"sources":["../src/index.js"],"names":["DEPOSIT_ESTIMATED_GAS","BigNumber","HUB_EXCHANGE_CEILING","Web3","utils","toWei","CHANNEL_DEPOSIT_MAX","constructorError","Card","opts","Error","onStateUpdate","hubUrl","rpcProvider","domain","address","web3","connext","tokenAddress","tokenContract","channelState","connextState","exchangeRate","existingMnemonic","mnemonic","localStorage","getItem","delegateSigner","getAddressString","setWeb3","setConnext","setTokenContract","pollConnextState","setBrowserWalletMinimumBalance","poller","providerOpts","ProviderOptions","approving","provider","customWeb3","options","user","origin","eth","Contract","tokenAbi","e","console","log","that","on","state","persistent","channel","balance","balanceTokenUser","runtime","rates","USD","start","autoDeposit","autoSwap","setInterval","BN","getGasPrice","defaultGas","depositGasPrice","multipliedBy","minConvertable","CurrencyConvertable","CurrencyType","WEI","browserMinimumBalance","wei","toWEI","amount","dai","toUSD","getBalance","tokenBalance","methods","balanceOf","call","net","getId","message","warn","minWei","lt","canDeposit","channelDeposit","amountWei","minus","toFixed","amountToken","weiDeposit","deposit","canExchange","weiBalance","balanceWeiUser","gt","lte","exchange","value","Number","isNaN","payment","meta","purchaseId","payments","type","recipient","emptyAddress","toString","secret","generateSecret","paymentHandler","recipientAddress","act","recipientNeedsCollateral","needsCollateral","paymentAmount","balanceError","isZero","isAddress","addressError","errorMessage","buy","paymentRes","success","iteration","stop","iterations","setState","showReceipt","paymentState","PaymentStates","CollateralTimeout","CollateralStates","Timeout","Success","Promise","res","rej","collateralizeInterval","clearInterval","redeem","withdrawEth","withdrawalVal","createWithdrawValues","JSON","stringify","withdraw","tokensToSell","withdrawalWeiUser","weiToSell","withdrawalTokenUser","substr","cents","substring","length","ceilingWei","BEI","min","amountBigNumber","weiToRefund","max"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA,IAAMA,qBAAqB,GAAG,IAAIC,kBAAJ,CAAc,QAAd,CAA9B,C,CAAuD;;AACvD,IAAMC,oBAAoB,GAAG,IAAID,kBAAJ,CAAcE,aAAKC,KAAL,CAAWC,KAAX,CAAiB,IAAjB,EAAuB,OAAvB,CAAd,CAA7B,C,CAA6E;;AAC7E,IAAMC,mBAAmB,GAAG,IAAIL,kBAAJ,CAAcE,aAAKC,KAAL,CAAWC,KAAX,CAAiB,IAAjB,EAAuB,OAAvB,CAAd,CAA5B,C,CAA4E;;AAE5E,IAAME,gBAAgB,GAAG,mHAAzB,C,CAEA;;IACMC,I;;;AACJ,gBAAYC,IAAZ,EAAkB;AAAA;AAChB,QAAI,sBAAOA,IAAP,MAAgB,QAApB,EAA8B,MAAM,IAAIC,KAAJ,CAAUH,gBAAV,CAAN,CADd,CAGhB;;AACA,SAAKI,aAAL,GAAqBF,IAAI,CAACE,aAAL,GAAqBF,IAAI,CAACE,aAA1B,GAA0C,YAAM,CAAE,CAAvE;AACA,SAAKC,MAAL,GAAcH,IAAI,CAACG,MAAL,GAAcH,IAAI,CAACG,MAAnB,GAA4B,uBAA1C;AACA,SAAKC,WAAL,GAAmBJ,IAAI,CAACI,WAAL,GAAmBJ,IAAI,CAACI,WAAxB,GAAsC,uBAAzD;AACA,SAAKC,MAAL,GAAcL,IAAI,CAACK,MAAL,GAAcL,IAAI,CAACK,MAAnB,GAA4B,WAA1C,CAPgB,CAOuC;;AAEvD,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,YAAL,GAAoB,MAApB;AACD,G,CAED;AACA;;;;;;;;iDACWC,gB;;;;;;AACT;AACMC,gBAAAA,Q,GAAWD,gBAAgB,IAAIE,YAAY,CAACC,OAAb,CAAqB,UAArB,C,EACrC;;;uBAC6B,wBAAaF,QAAb,C;;;AAAvBG,gBAAAA,c;;uBACgBA,cAAc,CAACC,gBAAf,E;;;AAAhBb,gBAAAA,O;AACN,qBAAKA,OAAL,GAAeA,OAAf,C,CAEA;;;uBACM,KAAKc,OAAL,CAAaF,cAAb,C;;;;uBACA,KAAKG,UAAL,E;;;;uBACA,KAAKC,gBAAL,E;;;;uBAGA,KAAKC,gBAAL,E;;;;uBACA,KAAKC,8BAAL,E;;;;uBACA,KAAKC,MAAL,E;;;iDAGCnB,O;;;;;;;;;;;;;;;QAGT;AACA;AACA;;;;;;;kDACcY,c;;;;;;AACNQ,gBAAAA,Y,GAAe,IAAIC,wBAAJ,CAAoBT,cAApB,EAAoC,KAAKd,WAAzC,EAAsD,KAAKD,MAA3D,EAAmEyB,SAAnE,E;AACfC,gBAAAA,Q,GAAW,6BAAeH,YAAf,C;AACXI,gBAAAA,U,GAAa,IAAIpC,YAAJ,CAASmC,QAAT,C;AACnB,qBAAKtB,IAAL,GAAYuB,UAAZ;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIMC,gBAAAA,O,GAAU;AACdxB,kBAAAA,IAAI,EAAE,KAAKA,IADG;AAEdJ,kBAAAA,MAAM,EAAE,KAAKA,MAFC;AAGd6B,kBAAAA,IAAI,EAAE,KAAK1B,OAHG;AAId2B,kBAAAA,MAAM,EAAE,KAAK5B;AAJC,iB,EAOhB;;;uBACsB,+BAAiB0B,OAAjB,C;;;AAAhBvB,gBAAAA,O;AACN;AACA;AACA;AACA;AACA;AACA,qBAAKA,OAAL,GAAeA,OAAf;AACA,qBAAKC,YAAL,GAAoBD,OAAO,CAACR,IAAR,CAAaS,YAAjC;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,oBAAI;AACIC,kBAAAA,aADJ,GACoB,IAAI,KAAKH,IAAL,CAAU2B,GAAV,CAAcC,QAAlB,CAA2BC,mBAA3B,EAAqC,KAAK3B,YAA1C,CADpB;AAEF,uBAAKC,aAAL,GAAqBA,aAArB;AACD,iBAHD,CAGE,OAAO2B,CAAP,EAAU;AACVC,kBAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,CAA5C,EADU,CACsC;AACjD;;;;;;;;;;;;;;;QAGH;AACA;AACA;;;;;;;;;;;;;AAEQG,gBAAAA,I,GAAO,I,EACb;;AACA,qBAAKhC,OAAL,CAAaiC,EAAb,CAAgB,eAAhB,EAAiC,UAAAC,KAAK,EAAI;AACxC,sBAAIA,KAAK,CAACC,UAAN,CAAiBC,OAArB,EAA8B;AAC5B,wBAAMC,OAAO,GAAGH,KAAK,CAACC,UAAN,CAAiBC,OAAjB,CAAyBE,gBAAzC,CAD4B,CAE5B;;AACAN,oBAAAA,IAAI,CAACtC,aAAL,CAAmB2C,OAAnB;AACD;;AAEDL,kBAAAA,IAAI,CAAC7B,YAAL,GAAoB+B,KAAK,CAACC,UAAN,CAAiBC,OAArC;AACAJ,kBAAAA,IAAI,CAAC5B,YAAL,GAAoB8B,KAApB;AACAF,kBAAAA,IAAI,CAAC3B,YAAL,GAAoB6B,KAAK,CAACK,OAAN,CAAclC,YAAd,GAA6B6B,KAAK,CAACK,OAAN,CAAclC,YAAd,CAA2BmC,KAA3B,CAAiCC,GAA9D,GAAoE,CAAxF;AACAT,kBAAAA,IAAI,CAACO,OAAL,GAAeL,KAAK,CAACK,OAArB;AACD,iBAXD,E,CAaA;;;uBACM,KAAKvC,OAAL,CAAa0C,KAAb,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAIA,KAAKC,WAAL,E;;;;uBACA,KAAKC,QAAL,E;;;AACN;AAEAC,gBAAAA,WAAW;AAAA;AAAA;AAAA;AAAA,0CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACJ,KAAI,CAACF,WAAL,EADI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAD,IAER,IAFQ,CAAX;AAIAE,gBAAAA,WAAW;AAAA;AAAA;AAAA;AAAA,0CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACJ,KAAI,CAACD,QAAL,EADI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAD,IAER,GAFQ,CAAX,C,CAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIQ7C,gBAAAA,I,GAAuB,I,CAAvBA,I,EAAMK,Y,GAAiB,I,CAAjBA,Y;;sBACV,CAACL,IAAD,IAAS,CAACK,Y;;;;;;;;+BAES0C,W;;uBAAS/C,IAAI,CAAC2B,GAAL,CAASqB,WAAT,E;;;;AAA1BC,gBAAAA,U;AACN;AACMC,gBAAAA,e,GAAkBlE,qBAAqB,CAACmE,YAAtB,CAAmC,IAAIlE,kBAAJ,CAAc,CAAd,CAAnC,EAAqDkE,YAArD,CAAkEF,UAAlE,C,EACxB;;AACMG,gBAAAA,c,GAAiB,IAAIC,4BAAJ,CAAwBC,4BAAaC,GAArC,EAA0CL,eAA1C,EAA2D;AAAA,yBAAM,+BAAiB7C,YAAjB,CAAN;AAAA,iBAA3D,C;AAEjBmD,gBAAAA,qB,GAAwB;AAC5BC,kBAAAA,GAAG,EAAEL,cAAc,CAACM,KAAf,GAAuBC,MADA;AAE5BC,kBAAAA,GAAG,EAAER,cAAc,CAACS,KAAf,GAAuBF;AAFA,iB;AAK9B,qBAAKH,qBAAL,GAA6BA,qBAA7B;;;;;;;;;;;;;;;QAGF;AACA;;;;;;;;;;;;;AAGIzD,gBAAAA,O,GAQE,I,CARFA,O,EACAI,a,GAOE,I,CAPFA,a,EACAE,Y,GAME,I,CANFA,Y,EACAH,Y,GAKE,I,CALFA,Y,EACAI,Y,GAIE,I,CAJFA,Y,EACAT,W,GAGE,I,CAHFA,W,EACAG,I,GAEE,I,CAFFA,I,EACAwD,qB,GACE,I,CADFA,qB;;sBAEE,CAAC3D,WAAD,IAAgB,CAAC2D,qB;;;;;;;;;uBAECxD,IAAI,CAAC2B,GAAL,CAASmC,UAAT,CAAoB/D,OAApB,C;;;AAAhBuC,gBAAAA,O;AAEFyB,gBAAAA,Y,GAAe,G;;;uBAEI5D,aAAa,CAAC6D,OAAd,CAAsBC,SAAtB,CAAgClE,OAAhC,EAAyCmE,IAAzC,E;;;AAArBH,gBAAAA,Y;;;;;;;gCAEAhC,O;8GACyE7B,Y;;uBAAgEF,IAAI,CAAC2B,GAAL,CAASwC,GAAT,CAAaC,KAAb,E;;;;gCACvI,cAAEC,O;;;8BAFIC,I;;;sBAONhC,OAAO,KAAK,GAAZ,IAAmByB,YAAY,KAAK,G;;;;;AAChCQ,gBAAAA,M,GAAS,IAAItF,kBAAJ,CAAcuE,qBAAqB,CAACC,GAApC,C,EACf;AACA;;qBACI,IAAIxE,kBAAJ,CAAcqD,OAAd,EAAuBkC,EAAvB,CAA0BD,MAA1B,C;;;;;;;;sBAGA,CAAClE,YAAD,IAAiB,CAACA,YAAY,CAACmC,OAAb,CAAqBiC,UAAvC,IAAqDnE,YAAY,KAAK,M;;;;;;;;AAC1E;AAEMoE,gBAAAA,c,GAAiB;AACrBC,kBAAAA,SAAS,EAAE,IAAI1F,kBAAJ,CAAc,IAAIA,kBAAJ,CAAcqD,OAAd,EAAuBsC,KAAvB,CAA6BL,MAA7B,CAAd,EAAoDM,OAApD,CAA4D,CAA5D,CADU;AAErBC,kBAAAA,WAAW,EAAEf;AAFQ,iB;;sBAKnBW,cAAc,CAACC,SAAf,KAA6B,GAA7B,IAAoCD,cAAc,CAACI,WAAf,KAA+B,G;;;;;;;;AAEvE;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACMC,gBAAAA,U,GAAa,IAAI9F,kBAAJ,CAAcyF,cAAc,CAACC,SAA7B,C;AACnBD,gBAAAA,cAAc,CAACC,SAAf,GAA2BI,UAAU,CAACF,OAAX,CAAmB,CAAnB,CAA3B;;uBAEM,KAAK5E,OAAL,CAAa+E,OAAb,CAAqBN,cAArB,C;;;;;;;;;;;;;;;QAIV;;;;AAcA;;;;;;;;;;AAEUtE,gBAAAA,Y,GAA+B,I,CAA/BA,Y,EAAcC,Y,GAAiB,I,CAAjBA,Y;;sBAClB,CAACA,YAAD,IAAiB,CAACA,YAAY,CAACmC,OAAb,CAAqByC,W;;;;;;;;AAErCC,gBAAAA,U,GAAa,IAAIjG,kBAAJ,CAAcmB,YAAY,CAAC+E,cAA3B,C;AACbpB,gBAAAA,Y,GAAe,IAAI9E,kBAAJ,CAAcmB,YAAY,CAACmC,gBAA3B,C;;sBACjBnC,YAAY,IAAI8E,UAAU,CAACE,EAAX,CAAc,IAAInG,kBAAJ,CAAc,GAAd,CAAd,CAAhB,IAAqD8E,YAAY,CAACsB,GAAb,CAAiBnG,oBAAjB,C;;;;;;uBAEjD,KAAKe,OAAL,CAAaqF,QAAb,CAAsBlF,YAAY,CAAC+E,cAAnC,EAAmD,KAAnD,C;;;;;;;;;;;;;;;QAKV;AACA;AACA;;;;;;;mDAC6BI,K;;;;;;AACnBtF,gBAAAA,O,GAAY,I,CAAZA,O;;qBACJuF,MAAM,CAACC,KAAP,CAAaF,KAAb,C;;;;;sBAA2B,IAAI7F,KAAJ,CAAU,uBAAV,C;;;AAE/B;AACA;AACMgG,gBAAAA,O,GAAU;AACdC,kBAAAA,IAAI,EAAE;AAAEC,oBAAAA,UAAU,EAAE;AAAd,mBADQ;AAEdC,kBAAAA,QAAQ,EAAE,CACR;AACEC,oBAAAA,IAAI,EAAE,SADR;AAEEC,oBAAAA,SAAS,EAAEC,mBAFb;AAGErC,oBAAAA,MAAM,EAAE;AACNmB,sBAAAA,WAAW,EAAE7E,OAAO,CAACR,IAAR,CAAaO,IAAb,CAAkBZ,KAAlB,CAAwBC,KAAxB,CAA8BkG,KAAK,CAACU,QAAN,EAA9B,EAAgD,OAAhD,CADP;AAENtB,sBAAAA,SAAS,EAAE;AAFL,qBAHV;AAOEgB,oBAAAA,IAAI,EAAE;AAAEO,sBAAAA,MAAM,EAAEjG,OAAO,CAACkG,cAAR;AAAV;AAPR,mBADQ;AAFI,iB;mDAeT,KAAKC,cAAL,CAAoBV,OAApB,C;;;;;;;;;;;;;;;;;;;;;mDAGaH,K,EAAOc,gB;;;;;;AACnBpG,gBAAAA,O,GAAY,I,CAAZA,O;;qBACJuF,MAAM,CAACC,KAAP,CAAaF,KAAb,C;;;;;sBAA2B,IAAI7F,KAAJ,CAAU,uBAAV,C;;;AAE/B;AACMgG,gBAAAA,O,GAAU;AACdC,kBAAAA,IAAI,EAAE;AAAEC,oBAAAA,UAAU,EAAE;AAAd,mBADQ;AAEdC,kBAAAA,QAAQ,EAAE,CACR;AACEC,oBAAAA,IAAI,EAAE,YADR;AAEEC,oBAAAA,SAAS,EAAEM,gBAFb;AAGE;AACA1C,oBAAAA,MAAM,EAAE;AACNmB,sBAAAA,WAAW,EAAE7E,OAAO,CAACR,IAAR,CAAaO,IAAb,CAAkBZ,KAAlB,CAAwBC,KAAxB,CAA8BkG,KAAK,CAACU,QAAN,EAA9B,EAAgD,OAAhD,CADP;AAENtB,sBAAAA,SAAS,EAAE;AAFL;AAJV,mBADQ;AAFI,iB;;uBAeE,KAAKyB,cAAL,CAAoBV,OAApB,C;;;AAAZY,gBAAAA,G;AACNvE,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBsE,GAAnB;mDACOA,G;;;;;;;;;;;;;;;QAGT;AACA;AACA;;;;;;;mDACqBZ,O;;;;;;AACXzF,gBAAAA,O,GAAgC,I,CAAhCA,O,EAASD,I,GAAuB,I,CAAvBA,I,EAAMI,Y,GAAiB,I,CAAjBA,Y,EAEvB;AACA;;;uBAC8BH,OAAO,CAACsG,wBAAR,CAC5Bb,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoBE,SADQ,EAE5B,2BAAe,KAAf,EAAsBL,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoBlC,MAA1C,CAF4B,C;;;AAAxB6C,gBAAAA,e;AAON;AACMC,gBAAAA,a,GAAgB,2BAAe,IAAf,EAAqBf,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoBlC,MAAzC,C;;AACtB,oBAAI8C,aAAa,CAAC3B,WAAd,CAA0BM,EAA1B,CAA6B,IAAIrC,WAAJ,CAAO3C,YAAY,CAACmC,gBAApB,CAA7B,CAAJ,EAAyE;AACvEmE,kBAAAA,YAAY,GAAG,iCAAf;AACD;;AAED,oBAAID,aAAa,CAAC3B,WAAd,CAA0B6B,MAA1B,EAAJ,EAAwC;AACtCD,kBAAAA,YAAY,GAAG,uCAAf;AACD,iB,CAED;AACA;;;AACQX,gBAAAA,S,GAAcL,OAAO,CAACG,QAAR,CAAiB,CAAjB,C,CAAdE,S;;AACR,oBAAI,CAAC/F,IAAI,CAACZ,KAAL,CAAWwH,SAAX,CAAqBb,SAArB,CAAD,IAAoCA,SAAS,KAAKC,mBAAtD,EAAoE;AAClEa,kBAAAA,YAAY,GAAG,+BAAf;AACD,iB,CAED;;;sBACIH,YAAY,IAAIG,Y;;;;;AACZC,gBAAAA,Y,GAAeJ,YAAY,IAAIG,Y;sBAC/B,IAAInH,KAAJ,CAAUoH,YAAV,C;;;;;uBAciB7G,OAAO,CAAC8G,GAAR,CAAYrB,OAAZ,C;;;AAAnBsB,gBAAAA,U;;sBAEAtB,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoBC,IAApB,KAA6B,S;;;;;mDACxBJ,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoBF,IAApB,CAAyBO,M;;;mDAE3B,I;;;;;sBAED,IAAIxG,KAAJ,e;;;;;;;;;;;;;;;;;;;;;mDAImBgG,O;;;;;;AACnBzF,gBAAAA,O,GAAY,I,CAAZA,O,EACR;;sBACIyF,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoBC,IAApB,KAA6B,S;;;;;;;;;uBAIX7F,OAAO,CAAC8G,GAAR,CAAYrB,OAAZ,C;;;AAAhBuB,gBAAAA,O;;qBAEFA,O;;;;;;;;;uBAMEnE,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,4CACf,mBAAOoE,SAAP,EAAkBC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAE0BlH,OAAO,CAACsG,wBAAR,CACtBb,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoBE,SADE,EAEtB,2BAAe,KAAf,EAAsBL,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoBlC,MAA1C,CAFsB,CAF1B;;AAAA;AAEE6C,4BAAAA,eAFF;;AAME,gCAAI,CAACA,eAAD,IAAoBU,SAAS,GAAG,EAApC,EAAwC;AACtCC,8BAAAA,IAAI;AACL;;AARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADe;;AAAA;AAAA;AAAA;AAAA,qBAWf,IAXe,EAYf;AAAEC,kBAAAA,UAAU,EAAE;AAAd,iBAZe,C;;;qBAebZ,e;;;;;AACF,qBAAKa,QAAL,CAAc;AACZC,kBAAAA,WAAW,EAAE,IADD;AAEZC,kBAAAA,YAAY,EAAEC,aAAa,CAACC;AAFhB,iBAAd;mDAIOC,gBAAgB,CAACC,O;;;mDAGnBD,gBAAgB,CAACE,O;;;;;;;;;;;;;;;QAG1B;;;;uCACmBlC,O,EAAS;AAAA,UAClBzF,OADkB,GACN,IADM,CAClBA,OADkB;AAE1B,UAAIiH,SAAS,GAAG,CAAhB;AACA,aAAO,IAAIW,OAAJ,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC/B,YAAMC,qBAAqB,GAAGlF,WAAW;AAAA;AAAA;AAAA;AAAA,kCAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACxCf,kBAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBkF,SAAxB;AADwC;AAAA,yBAEVjH,OAAO,CAACsG,wBAAR,CAC5Bb,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoBE,SADQ,EAE5B,2BAAe,KAAf,EAAsBL,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoBlC,MAA1C,CAF4B,CAFU;;AAAA;AAElC6C,kBAAAA,eAFkC;;AAMxC,sBAAI,CAACA,eAAL,EAAsB;AACpBzE,oBAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA8F,oBAAAA,GAAG,CAAC,IAAD,CAAH;AACAG,oBAAAA,aAAa,CAACD,qBAAD,CAAb;AACD,mBAJD,MAIO,IAAId,SAAS,IAAI,EAAjB,EAAqB;AAC1Ba,oBAAAA,GAAG,CAAC,IAAIrI,KAAJ,CAAU,yBAAV,CAAD,CAAH;AACAuI,oBAAAA,aAAa,CAACD,qBAAD,CAAb;AACD;;AACDd,kBAAAA,SAAS,IAAI,CAAb;;AAdwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAD,IAetC,IAfsC,CAAzC;AAgBD,OAjBM,CAAP;AAkBD;;;;;;mDAEmBhB,M;;;;;;AACVjG,gBAAAA,O,GAAwC,I,CAAxCA,O,EAASG,Y,GAA+B,I,CAA/BA,Y,EAAcC,Y,GAAiB,I,CAAjBA,Y;;sBAC3B,CAACJ,OAAD,IAAY,CAACG,YAAb,IAA6B,CAACC,Y;;;;;sBAAoB,IAAIX,KAAJ,CAAU,wBAAV,C;;;oBAEjDwG,M;;;;;sBAAc,IAAIxG,KAAJ,CAAU,4CAAV,C;;;;mDAIVO,OAAO,CAACiI,MAAR,CAAehC,MAAf,C;;;;;sBAED,IAAIxG,KAAJ,e;;;;;;;;;;;;;;;QAKV;AACA;AACA;;;;;;;mDACyBqG,S;;;;;;;;;;AAAWoC,gBAAAA,W,iEAAc,I;AACxClI,gBAAAA,O,GAAkB,I,CAAlBA,O,EAASD,I,GAAS,I,CAATA,I;AACXoI,gBAAAA,a,GAAgB,KAAKC,oBAAL,CAA0BtC,SAA1B,EAAqCoC,WAArC,C,EAEtB;AACA;AACA;;oBACKnI,IAAI,CAACZ,KAAL,CAAWwH,SAAX,CAAqBb,SAArB,C;;;;;sBACG,IAAIrG,KAAJ,WAAa0I,aAAa,CAACrC,SAA3B,6B;;;AAGR;AACA;AAEAhE,gBAAAA,OAAO,CAACC,GAAR,wBAA4BsG,IAAI,CAACC,SAAL,CAAeH,aAAf,EAA8B,IAA9B,EAAoC,CAApC,CAA5B;;uBACMnI,OAAO,CAACuI,QAAR,CAAiBJ,aAAjB,C;;;;;;;;;;;;;;;;;;yCAIarC,S,EAAWoC,W,EAAa;AAC3C;AACA;AAF2C,UAGnC/H,YAHmC,GAGJ,IAHI,CAGnCA,YAHmC;AAAA,UAGrBE,YAHqB,GAGJ,IAHI,CAGrBA,YAHqB;AAI3C,UAAI8H,aAAa,GAAG;AAClBrC,QAAAA,SAAS,EAATA,SADkB;AAElBzF,QAAAA,YAAY,EAAZA,YAFkB;AAGlBmI,QAAAA,YAAY,EAAE,GAHI;AAIlBC,QAAAA,iBAAiB,EAAE,GAJD;AAKlBC,QAAAA,SAAS,EAAE,GALO;AAMlBC,QAAAA,mBAAmB,EAAE;AANH,OAApB;;AAQA,UAAIT,WAAJ,EAAiB;AACf;AACAC,QAAAA,aAAa,mCACRA,aADQ;AAEXK,UAAAA,YAAY,EAAErI,YAAY,CAACmC,gBAFhB;AAGXmG,UAAAA,iBAAiB,EAAEtI,YAAY,CAAC+E,cAHrB;AAIXwD,UAAAA,SAAS,EAAE,GAJA;AAKXC,UAAAA,mBAAmB,EAAE;AALV,UAAb;AAOD,OATD,MASO;AACL;AACAR,QAAAA,aAAa,mCACRA,aADQ;AAEXK,UAAAA,YAAY,EAAE,GAFH;AAGXC,UAAAA,iBAAiB,EAAE,GAHR;AAIXC,UAAAA,SAAS,EAAEvI,YAAY,CAAC+E,cAJb;AAKXyD,UAAAA,mBAAmB,EAAExI,YAAY,CAACmC;AALvB,UAAb;AAOD;;AAED,aAAO6F,aAAP;AACD,K,CAED;AACA;AACA;;;;0CACsBxE,G,EAAK;AACzB;AACA,UAAMiF,MAAM,GAAGjF,GAAG,GAAG,4CAAmBA,GAAnB,CAAH,GAA6B,CAAC,GAAD,EAAM,IAAN,CAA/C;AACA,UAAIkF,KAAK,GAAGD,MAAM,CAAC,CAAD,CAAN,CAAUE,SAAV,CAAoB,CAApB,EAAuB,CAAvB,CAAZ;AACA,UAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwBF,KAAK,aAAMA,KAAN,MAAL;AACxB,uBAAUD,MAAM,CAAC,CAAD,CAAhB,cAAuBC,KAAvB;AACD;;;yCA7R2BrF,G,EAAKpD,Y,EAAc;AAC7C;AACA;AACA,UAAM4I,UAAU,GAAG,IAAI5F,4BAAJ,CACjBC,4BAAa4F,GADI,EAEjBjK,mBAAUkK,GAAV,CAAcjK,oBAAd,EAAoCI,mBAApC,CAFiB,EAGjB;AAAA,eAAM,+BAAiBe,YAAjB,CAAN;AAAA,OAHiB,EAIjBqD,KAJiB,GAIT0F,eAJV;;AAMA,UAAMC,WAAW,GAAGpK,mBAAUqK,GAAV,CAAc,IAAIvG,WAAJ,CAAOU,GAAP,EAAYmB,KAAZ,CAAkBqE,UAAlB,CAAd,EAA6C,IAAIlG,WAAJ,CAAO,CAAP,CAA7C,CAApB;;AACA,aAAOsG,WAAW,CAACxE,OAAZ,CAAoB,CAApB,CAAP;AACD;;;;;eAqRYrF,I","sourcesContent":["import 'babel-polyfill';\nimport { getConnextClient } from 'connext/dist/Connext';\nimport Web3 from 'web3';\nimport { emptyAddress } from 'connext/dist/Utils';\nimport { convertPayment } from 'connext/dist/types';\nimport getExchangeRates from 'connext/dist/lib/getExchangeRates';\nimport { CurrencyType } from 'connext/dist/state/ConnextState/CurrencyTypes';\nimport CurrencyConvertable from 'connext/dist/lib/currency/CurrencyConvertable';\n\nimport BigNumber from 'bignumber.js';\nimport BN from 'bn.js';\n\nimport ProviderOptions from './utils/ProviderOptions';\nimport clientProvider from './utils/web3/clientProvider';\nimport { getDollarSubstring } from './utils/getDollarSubstring';\nimport createWallet from './walletGen';\nimport tokenAbi from './abi/humanToken.json';\n\n// set constants\nconst DEPOSIT_ESTIMATED_GAS = new BigNumber('700000'); // 700k gas\nconst HUB_EXCHANGE_CEILING = new BigNumber(Web3.utils.toWei('69', 'ether')); // 69 TST\nconst CHANNEL_DEPOSIT_MAX = new BigNumber(Web3.utils.toWei('30', 'ether')); // 30 TST=\n\nconst constructorError = 'Card constructor takes one object as an argument with \"hubUrl\", \"rpcProvider\", and \"onStateUpdate\" as properties.';\n\n// define class\nclass Card {\n  constructor(opts) {\n    if (typeof opts !== 'object') throw new Error(constructorError);\n\n    // passed in options\n    this.onStateUpdate = opts.onStateUpdate ? opts.onStateUpdate : () => {};\n    this.hubUrl = opts.hubUrl ? opts.hubUrl : 'http://localhost:8080';\n    this.rpcProvider = opts.rpcProvider ? opts.rpcProvider : 'http://localhost:8545';\n    this.domain = opts.domain ? opts.domain : 'localhost'; // might not need\n\n    this.address = '';\n    this.web3 = {};\n    this.connext = {};\n    this.tokenAddress = null;\n    this.tokenContract = null;\n    this.channelState = null;\n    this.connextState = null;\n    this.exchangeRate = '0.00';\n  }\n\n  // TODO: take in mnemonic so that users can\n  // generate wallet from another dapplication\n  async init(existingMnemonic) {\n    // check if mnemonic exists in LS\n    const mnemonic = existingMnemonic || localStorage.getItem('mnemonic');\n    // otherwise generate wallet in create wallet\n    const delegateSigner = await createWallet(mnemonic);\n    const address = await delegateSigner.getAddressString();\n    this.address = address;\n\n    // set up web3 and connext\n    await this.setWeb3(delegateSigner);\n    await this.setConnext();\n    await this.setTokenContract();\n\n    // start polling for state\n    await this.pollConnextState();\n    await this.setBrowserWalletMinimumBalance();\n    await this.poller();\n\n    // return address\n    return address;\n  }\n\n  // ************************************************* //\n  //                State setters                      //\n  // ************************************************* //\n  async setWeb3(delegateSigner) {\n    const providerOpts = new ProviderOptions(delegateSigner, this.rpcProvider, this.hubUrl).approving();\n    const provider = clientProvider(providerOpts);\n    const customWeb3 = new Web3(provider);\n    this.web3 = customWeb3;\n  }\n\n  async setConnext() {\n    const options = {\n      web3: this.web3,\n      hubUrl: this.hubUrl,\n      user: this.address,\n      origin: this.domain,\n    };\n\n    // *** Instantiate the connext client ***\n    const connext = await getConnextClient(options);\n    // console.log(`Successfully set up connext! Connext config:`);\n    // console.log(`  - tokenAddress: ${connext.opts.tokenAddress}`);\n    // console.log(`  - hubAddress: ${connext.opts.hubAddress}`);\n    // console.log(`  - contractAddress: ${connext.opts.contractAddress}`);\n    // console.log(`  - ethNetworkId: ${connext.opts.ethNetworkId}`);\n    this.connext = connext;\n    this.tokenAddress = connext.opts.tokenAddress;\n  }\n\n  async setTokenContract() {\n    try {\n      const tokenContract = new this.web3.eth.Contract(tokenAbi, this.tokenAddress);\n      this.tokenContract = tokenContract;\n    } catch (e) {\n      console.log('Error setting token contract', e); // eslint-disable-line\n    }\n  }\n\n  // ************************************************* //\n  //                    Pollers                        //\n  // ************************************************* //\n  async pollConnextState() {\n    const that = this;\n    // register listeners\n    this.connext.on('onStateChange', state => {\n      if (state.persistent.channel) {\n        const balance = state.persistent.channel.balanceTokenUser;\n        // balance is in Dai, return via callback so app/service can process usd amount\n        that.onStateUpdate(balance);\n      }\n\n      that.channelState = state.persistent.channel;\n      that.connextState = state;\n      that.exchangeRate = state.runtime.exchangeRate ? state.runtime.exchangeRate.rates.USD : 0;\n      that.runtime = state.runtime;\n    });\n\n    // start polling\n    await this.connext.start();\n  }\n\n  async poller() {\n    await this.autoDeposit();\n    await this.autoSwap();\n    // await this.connext.requestCollateral();\n\n    setInterval(async () => {\n      await this.autoDeposit();\n    }, 5000);\n\n    setInterval(async () => {\n      await this.autoSwap();\n    }, 500);\n\n    // setInterval(async () => {\n    //   await this.checkStatus();\n    // }, 400)\n  }\n\n  async setBrowserWalletMinimumBalance() {\n    const { web3, connextState } = this;\n    if (!web3 || !connextState) return;\n\n    const defaultGas = new BN(await web3.eth.getGasPrice())\n    // default connext multiple is 1.5, leave 2x for safety\n    const depositGasPrice = DEPOSIT_ESTIMATED_GAS.multipliedBy(new BigNumber(2)).multipliedBy(defaultGas);\n    // add dai conversion\n    const minConvertable = new CurrencyConvertable(CurrencyType.WEI, depositGasPrice, () => getExchangeRates(connextState));\n\n    const browserMinimumBalance = {\n      wei: minConvertable.toWEI().amount,\n      dai: minConvertable.toUSD().amount,\n    }\n\n    this.browserMinimumBalance = browserMinimumBalance;\n  }\n\n  // TODO: figure out why after proposing a deposit\n  // it halts awaiting a confirm \n  async autoDeposit() {\n    const {\n      address,\n      tokenContract,\n      connextState,\n      tokenAddress,\n      exchangeRate,\n      rpcProvider,\n      web3,\n      browserMinimumBalance,\n    } = this;\n    if (!rpcProvider || !browserMinimumBalance) return;\n\n    const balance = await web3.eth.getBalance(address);\n\n    let tokenBalance = '0';\n    try {\n      tokenBalance = await tokenContract.methods.balanceOf(address).call();\n    } catch (e) {\n      console.warn(\n        `Error fetching token balance, are you sure the token address (addr: ${tokenAddress}) is correct for the selected network (id: ${await web3.eth.net.getId()}))? Error: ${\n        e.message\n        }`\n      );\n    }\n\n    if (balance !== '0' || tokenBalance !== '0') {\n      const minWei = new BigNumber(browserMinimumBalance.wei);\n      // don't autodeposit anything under the threshold\n      // update the refunding variable before returning\n      if (new BigNumber(balance).lt(minWei)) return;\n\n      // only proceed with deposit request if you can deposit\n      if (!connextState || !connextState.runtime.canDeposit || exchangeRate === '0.00') return;\n      // if (!connextState || exchangeRate === '0.00') return;\n\n      const channelDeposit = {\n        amountWei: new BigNumber(new BigNumber(balance).minus(minWei)).toFixed(0),\n        amountToken: tokenBalance,\n      };\n\n      if (channelDeposit.amountWei === '0' && channelDeposit.amountToken === '0') return;\n\n      // if amount to deposit into channel is over the channel max\n      // then return excess deposit to the sending account\n      // const weiToReturn = this.constructor.calculateWeiToRefund(channelDeposit.amountWei, connextState);\n\n      // return wei to sender\n      // if (weiToReturn !== '0') {\n      //   // await this.returnWei(weiToReturn);\n      //   return;\n      // }\n\n      // update channel deposit\n      // const weiDeposit = new BigNumber(channelDeposit.amountWei).minus(new BigNumber(weiToReturn)); // with refund happening... we are removing that\n      const weiDeposit = new BigNumber(channelDeposit.amountWei);\n      channelDeposit.amountWei = weiDeposit.toFixed(0);\n\n      await this.connext.deposit(channelDeposit);\n    }\n  }\n\n  // returns a BigNumber\n  static calculateWeiToRefund(wei, connextState) {\n    // channel max tokens is minimum of the ceiling that\n    // the hub would exchange, or a set deposit max\n    const ceilingWei = new CurrencyConvertable(\n      CurrencyType.BEI,\n      BigNumber.min(HUB_EXCHANGE_CEILING, CHANNEL_DEPOSIT_MAX),\n      () => getExchangeRates(connextState)\n    ).toWEI().amountBigNumber;\n\n    const weiToRefund = BigNumber.max(new BN(wei).minus(ceilingWei), new BN(0));\n    return weiToRefund.toFixed(0);\n  }\n\n  // swapping wei for dai\n  async autoSwap() {\n    const { channelState, connextState } = this;\n    if (!connextState || !connextState.runtime.canExchange) return;\n\n    const weiBalance = new BigNumber(channelState.balanceWeiUser);\n    const tokenBalance = new BigNumber(channelState.balanceTokenUser);\n    if (channelState && weiBalance.gt(new BigNumber('0')) && tokenBalance.lte(HUB_EXCHANGE_CEILING)) {\n      // console.log(`Exchanging ${channelState.balanceWeiUser} wei`); // eslint-disable-line\n      await this.connext.exchange(channelState.balanceWeiUser, 'wei');\n    }\n  }\n\n\n  // ************************************************* //\n  //                  Send Funds                       //\n  // ************************************************* //\n  async generateRedeemableLink(value) {\n    const { connext } = this;\n    if (Number.isNaN(value)) throw new Error('Value is not a number');\n\n    // generate secret, set type, and set\n    // recipient to empty address\n    const payment = {\n      meta: { purchaseId: 'ujo' },\n      payments: [\n        {\n          type: 'PT_LINK',\n          recipient: emptyAddress,\n          amount: {\n            amountToken: connext.opts.web3.utils.toWei(value.toString(), \"ether\"),\n            amountWei: '0',\n          },\n          meta: { secret: connext.generateSecret() },\n        }\n      ],\n    };\n\n    return this.paymentHandler(payment);\n  }\n\n  async generatePayment(value, recipientAddress) {\n    const { connext } = this;\n    if (Number.isNaN(value)) throw new Error('Value is not a number');\n\n    // generate secret, set type, and set\n    const payment = {\n      meta: { purchaseId: 'ujo' },\n      payments: [\n        {\n          type: 'PT_CHANNEL',\n          recipient: recipientAddress,\n          // secret: connext.generateSecret(),\n          amount: {\n            amountToken: connext.opts.web3.utils.toWei(value.toString(), \"ether\"),\n            amountWei: '0',\n          },\n        }\n      ],\n    };\n\n    const act = await this.paymentHandler(payment);\n    console.log('act', act);\n    return act;\n  }\n\n  // returns true on a successful payment to address\n  // return the secret on a successful link generation\n  // otherwise throws an error\n  async paymentHandler(payment) {\n    const { connext, web3, channelState } = this;\n\n    // check if the recipient needs collateral\n    // is utilized later in fn. Consider in a v2\n    const needsCollateral = await connext.recipientNeedsCollateral(\n      payment.payments[0].recipient,\n      convertPayment('str', payment.payments[0].amount)\n    );\n\n    let balanceError, addressError;\n\n    // validate that the token amount is within bounds\n    const paymentAmount = convertPayment('bn', payment.payments[0].amount);\n    if (paymentAmount.amountToken.gt(new BN(channelState.balanceTokenUser))) {\n      balanceError = 'Insufficient balance in channel';\n    }\n\n    if (paymentAmount.amountToken.isZero()) {\n      balanceError = 'Please enter a payment amount above 0';\n    }\n\n    // validate recipient is valid address OR the empty address\n    // TODO: handle in other functions that structure payment object\n    const { recipient } = payment.payments[0];\n    if (!web3.utils.isAddress(recipient) && recipient !== emptyAddress) {\n      addressError = 'Please choose a valid address';\n    }\n\n    // return if either errors exist\n    if (balanceError || addressError) {\n      const errorMessage = balanceError || addressError;\n      throw new Error(errorMessage);\n    }\n\n    // comment back in later if needed\n    // if (needsCollateral && payment.payments[0].type !== 'PT_LINK') {\n    //   try {\n    //     await this.tryToCollateralize(payment);\n    //   } catch (e) {\n    //     throw e;\n    //   }\n    // }\n\n    // otherwise make payment\n    try {\n      let paymentRes = await connext.buy(payment);\n      // console.log(`Payment result: ${JSON.stringify(paymentRes, null, 2)}`);\n      if (payment.payments[0].type === 'PT_LINK') {\n        return payment.payments[0].meta.secret;\n      }\n      return true;\n    } catch (e) {\n      throw new Error(e);\n    }\n  }\n\n  async collateralizeRecipient(payment) {\n    const { connext } = this;\n    // do not collateralize on pt link payments\n    if (payment.payments[0].type === 'PT_LINK') return;\n\n    // collateralize by sending payment\n    // const err = await this._sendPayment(payment, true);\n    const success = await connext.buy(payment);\n    // somehow it worked???\n    if (success) return;\n\n    // call to send payment failed, monitor collateral\n    // watch for confirmation on the recipients side\n    // of the channel for 20s\n    let needsCollateral\n    await setInterval(\n      async (iteration, stop) => {\n        // returns null if no collateral needed\n        needsCollateral = await connext.recipientNeedsCollateral(\n          payment.payments[0].recipient,\n          convertPayment('str', payment.payments[0].amount)\n        );\n        if (!needsCollateral || iteration > 20) {\n          stop();\n        }\n      },\n      5000,\n      { iterations: 20 }\n    );\n\n    if (needsCollateral) {\n      this.setState({\n        showReceipt: true,\n        paymentState: PaymentStates.CollateralTimeout\n      });\n      return CollateralStates.Timeout;\n    }\n\n    return CollateralStates.Success;\n  }\n\n  // not utilized yet\n  tryToCollateralize(payment) {\n    const { connext } = this;\n    let iteration = 0;\n    return new Promise((res, rej) => {\n      const collateralizeInterval = setInterval(async () => {\n        console.log('interval', iteration);\n        const needsCollateral = await connext.recipientNeedsCollateral(\n          payment.payments[0].recipient,\n          convertPayment('str', payment.payments[0].amount),\n        );\n        if (!needsCollateral) {\n          console.log('successfulyl collateralized')\n          res(true);\n          clearInterval(collateralizeInterval);\n        } else if (iteration >= 20) {\n          rej(new Error('Unable to collateralize'));\n          clearInterval(collateralizeInterval);\n        }\n        iteration += 1;\n      }, 5000);\n    });\n  }\n\n  async redeemPayment(secret) {\n    const { connext, channelState, connextState } = this;\n    if (!connext || !channelState || !connextState) throw new Error('Connext not configured');\n\n    if (!secret) throw new Error('No secret detected, cannot redeem payment.');\n\n    // user is not payor, can redeem payment\n    try {\n      return connext.redeem(secret);\n    } catch (e) {\n      throw new Error(e);\n    }\n  }\n\n\n  // ************************************************* //\n  //                 Withdraw Funds                    //\n  // ************************************************* //\n  async withdrawalAllFunds(recipient, withdrawEth = true) {\n    const { connext, web3 } = this;\n    const withdrawalVal = this.createWithdrawValues(recipient, withdrawEth);\n\n    // check for valid address\n    // let addressError = null\n    // let balanceError = null\n    if (!web3.utils.isAddress(recipient)) {\n      throw new Error(`${withdrawalVal.recipient} is not a valid address`);\n    }\n\n    // TODO: check the input balance is under channel balance\n    // TODO: allow partial withdrawals?\n\n    console.log(`Withdrawing: ${JSON.stringify(withdrawalVal, null, 2)}`);\n    await connext.withdraw(withdrawalVal);\n    // this.poller();\n  }\n\n  createWithdrawValues(recipient, withdrawEth) {\n    // set the state to contain the proper withdrawal args for\n    // eth or dai withdrawal\n    const { channelState, exchangeRate } = this;\n    let withdrawalVal = {\n      recipient,\n      exchangeRate,\n      tokensToSell: '0',\n      withdrawalWeiUser: '0',\n      weiToSell: '0',\n      withdrawalTokenUser: '0',\n    };\n    if (withdrawEth) {\n      // withdraw all channel balance in eth\n      withdrawalVal = {\n        ...withdrawalVal,\n        tokensToSell: channelState.balanceTokenUser,\n        withdrawalWeiUser: channelState.balanceWeiUser,\n        weiToSell: '0',\n        withdrawalTokenUser: '0',\n      };\n    } else {\n      // handle withdrawing all channel balance in dai\n      withdrawalVal = {\n        ...withdrawalVal,\n        tokensToSell: '0',\n        withdrawalWeiUser: '0',\n        weiToSell: channelState.balanceWeiUser,\n        withdrawalTokenUser: channelState.balanceTokenUser,\n      };\n    }\n\n    return withdrawalVal;\n  }\n\n  // ************************************************* //\n  //                    Helper                         //\n  // ************************************************* //\n  convertDaiToUSDString(dai) {\n    // const balance = state.persistent.channel.balanceTokenUser;\n    const substr = dai ? getDollarSubstring(dai) : ['0', '00'];\n    let cents = substr[1].substring(0, 2);\n    if (cents.length === 1) cents = `${cents}0`;\n    return `${substr[0]}.${cents}`;\n  }\n}\n\nexport default Card;\n"],"file":"index.js"}