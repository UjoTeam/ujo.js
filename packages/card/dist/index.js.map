{"version":3,"sources":["../src/index.js"],"names":["Web3","require","eth","humanTokenAbi","env","process","NODE_ENV","tokenAbi","console","log","JSON","stringify","hubUrlLocal","REACT_APP_LOCAL_HUB_URL","toLowerCase","localProvider","REACT_APP_LOCAL_RPC_URL","hubUrlRinkeby","REACT_APP_RINKEBY_HUB_URL","rinkebyProvider","REACT_APP_RINKEBY_RPC_URL","hubUrlMainnet","REACT_APP_MAINNET_HUB_URL","mainnetProvider","REACT_APP_MAINNET_RPC_URL","HASH_PREAMBLE","DEPOSIT_MINIMUM_WEI","utils","parseEther","HUB_EXCHANGE_CEILING","opts","headers","Authorization","withCredentials","Card","config","state","rpcUrl","hubUrl","tokenAddress","channelManagerAddress","hubWalletAddress","web3","customWeb3","tokenContract","connext","delegateSigner","modals","settings","keyGen","receive","send","cashOut","scan","deposit","authorized","approvalWeiUser","channelState","exchangeRate","interval","connextState","runtime","sendScanArgs","amount","recipient","address","status","withdraw","payment","networkHandler","bind","getNetwork","networkId","mnemonic","localStorage","getItem","rpc","setItem","getAddressString","setWeb3","setConnext","setTokenContract","authorizeHandler","pollConnextState","poller","window","location","reload","Error","ethereum","net","getId","windowId","providerOpts","ProviderOptions","store","approving","provider","customId","setState","alert","Contract","e","user","hubAddress","contractAddress","ethNetworkId","on","persistent","channel","rates","USD","start","autoDeposit","autoSwap","setInterval","checkStatus","getBalance","balance","tokenBalance","methods","balanceOf","call","message","warn","bigNumberify","lte","canDeposit","actualDeposit","amountWei","sub","toString","amountToken","depositRes","canExchange","weiBalance","balanceWeiUser","balanceTokenUser","gt","exchange","syncResultsFromHub","update","reason","axios","post","challengeRes","hash","sha3","data","nonce","personal","sign","signature","origin","authRes","token","document","cookie","get","res","success","requestCollateral","collateralRes"],"mappings":"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","sourcesContent":["import { getConnextClient } from 'connext/dist/Connext.js';\nimport axios from 'axios';\n\nimport ProviderOptions from '../utils/ProviderOptions.ts';\nimport clientProvider from '../utils/web3/clientProvider.ts';\nimport { createWalletFromMnemonic, createWallet } from './walletGen';\n\nconst Web3 = require('web3');\nconst eth = require('ethers');\nconst humanTokenAbi = require('../abi/humanToken.json');\n\nconst env = process.env.NODE_ENV;\nconst tokenAbi = humanTokenAbi;\nconsole.log(`starting app in env: ${JSON.stringify(process.env, null, 1)}`);\n\n// Provider info\n// local\nconst hubUrlLocal = process.env.REACT_APP_LOCAL_HUB_URL.toLowerCase();\nconst localProvider = process.env.REACT_APP_LOCAL_RPC_URL.toLowerCase();\n// rinkeby\nconst hubUrlRinkeby = process.env.REACT_APP_RINKEBY_HUB_URL.toLowerCase();\nconst rinkebyProvider = process.env.REACT_APP_RINKEBY_RPC_URL.toLowerCase();\n// mainnet\nconst hubUrlMainnet = process.env.REACT_APP_MAINNET_HUB_URL.toLowerCase();\nconst mainnetProvider = process.env.REACT_APP_MAINNET_RPC_URL.toLowerCase();\n\nconst HASH_PREAMBLE = 'SpankWallet authentication message:';\nconst DEPOSIT_MINIMUM_WEI = eth.utils.parseEther('0.03'); // 30 FIN\nconst HUB_EXCHANGE_CEILING = eth.utils.parseEther('69'); // 69 TST\n\nconst opts = {\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8',\n    Authorization: 'Bearer foo',\n  },\n  withCredentials: true,\n};\n\nclass Card {\n  constructor(config) {\n    console.log(config);\n    this.state = {\n      rpcUrl: null,\n      hubUrl: null,\n      tokenAddress: null,\n      channelManagerAddress: null,\n      hubWalletAddress: null,\n      web3: null,\n      customWeb3: null,\n      tokenContract: null,\n      connext: null,\n      delegateSigner: null,\n      modals: {\n        settings: false,\n        keyGen: false,\n        receive: false,\n        send: false,\n        cashOut: false,\n        scan: false,\n        deposit: false,\n      },\n      authorized: 'false',\n      approvalWeiUser: '10000',\n      channelState: null,\n      exchangeRate: '0.00',\n      interval: null,\n      connextState: null,\n      runtime: null,\n      sendScanArgs: {\n        amount: null,\n        recipient: null,\n      },\n      address: '',\n      status: {\n        deposit: '',\n        withdraw: '',\n        payment: '',\n      },\n    };\n\n    this.networkHandler = this.networkHandler.bind(this);\n  }\n\n  async init(config) {\n    this.web3 = config.web3;\n    this.networkId = await config.getNetwork();\n\n    /* \n    Start Connext logic\n    */\n\n    // Set up state\n    const mnemonic = localStorage.getItem('mnemonic');\n    let rpc = localStorage.getItem('rpc');\n    // TODO: better way to set default provider\n    // if it doesnt exist in storage\n    if (!rpc) {\n      rpc = env === 'development' ? 'LOCALHOST' : 'RINKEBY';\n      localStorage.setItem('rpc', rpc);\n    }\n    // If a browser address exists, create wallet\n    if (mnemonic) {\n      const delegateSigner = await createWalletFromMnemonic(mnemonic);\n      const address = await delegateSigner.getAddressString();\n      console.log('Autosigner address: ', address);\n\n      // TODO\n      // this.setState({ delegateSigner, address });\n      // store.dispatch({\n      //   type: 'SET_WALLET',\n      //   text: delegateSigner,\n      // });\n\n      // // If a browser address exists, instantiate connext\n      // console.log('this.state.delegateSigner', this.state.delegateSigner)\n      // if (this.state.delegateSigner) {\n      await this.setWeb3(rpc);\n      await this.setConnext();\n      await this.setTokenContract();\n      await this.authorizeHandler();\n\n      console.log(this.state.connext);\n      await this.pollConnextState();\n      await this.poller();\n    } else {\n      // Else, we wait for user to finish selecting through modal which will refresh page when done\n      // TODO\n      // const { modals } = this.state;\n      // this.setState({ modals: { ...modals, keyGen: true } });\n      await createWallet(this.state.web3);\n      // Then refresh the page\n      window.location.reload();\n    }\n  }\n\n  // ************************************************* //\n  //                State setters                      //\n  // ************************************************* //\n  async networkHandler(rpc) {\n    // called from settingsCard when a new RPC URL is connected\n    // will create a new custom web3 and reinstantiate connext\n    localStorage.setItem('rpc', rpc);\n    await this.setWeb3(rpc);\n    await this.setConnext();\n    await this.setTokenContract();\n  }\n\n  // either LOCALHOST MAINNET or RINKEBY\n  async setWeb3(rpc) {\n    let rpcUrl;\n    let hubUrl;\n    switch (rpc) {\n      case 'LOCALHOST':\n        rpcUrl = localProvider;\n        hubUrl = hubUrlLocal;\n        break;\n      case 'RINKEBY':\n        rpcUrl = rinkebyProvider;\n        hubUrl = hubUrlRinkeby;\n        break;\n      case 'MAINNET':\n        rpcUrl = mainnetProvider;\n        hubUrl = hubUrlMainnet;\n        break;\n      default:\n        throw new Error(`Unrecognized rpc: ${rpc}`);\n    }\n    console.log('Custom provider with rpc:', rpcUrl);\n\n    // Ask permission to view accounts\n    let windowId;\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      windowId = await window.web3.eth.net.getId();\n    }\n\n    const providerOpts = new ProviderOptions(store, rpcUrl).approving();\n    const provider = clientProvider(providerOpts);\n    const customWeb3 = new Web3(provider);\n    const customId = await customWeb3.eth.net.getId();\n\n    // NOTE: token/contract/hubWallet ddresses are set to state while initializing connext\n    this.setState({ customWeb3, hubUrl });\n    if (windowId && windowId !== customId) {\n      alert(\n        `Your card is set to ${JSON.stringify(\n          rpc,\n        )}. To avoid losing funds, please make sure your metamask and card are using the same network.`,\n      );\n    }\n  }\n\n  async setTokenContract() {\n    try {\n      const { customWeb3, tokenAddress } = this.state;\n      const tokenContract = new customWeb3.eth.Contract(tokenAbi, tokenAddress);\n      this.setState({ tokenContract });\n      console.log('Set up token contract details');\n    } catch (e) {\n      console.log('Error setting token contract');\n      console.log(e);\n    }\n  }\n\n  async setConnext() {\n    const { address, customWeb3, hubUrl } = this.state;\n\n    const opts = {\n      web3: customWeb3,\n      hubUrl, // in dev-mode: http://localhost:8080,\n      user: address,\n    };\n    console.log('Setting up connext with opts:', opts);\n\n    // *** Instantiate the connext client ***\n    const connext = await getConnextClient(opts);\n    console.log(`Successfully set up connext! Connext config:`);\n    console.log(`  - tokenAddress: ${connext.opts.tokenAddress}`);\n    console.log(`  - hubAddress: ${connext.opts.hubAddress}`);\n    console.log(`  - contractAddress: ${connext.opts.contractAddress}`);\n    console.log(`  - ethNetworkId: ${connext.opts.ethNetworkId}`);\n    this.setState({\n      connext,\n      tokenAddress: connext.opts.tokenAddress,\n      channelManagerAddress: connext.opts.contractAddress,\n      hubWalletAddress: connext.opts.hubAddress,\n      ethNetworkId: connext.opts.ethNetworkId,\n    });\n  }\n\n  // ************************************************* //\n  //                    Pollers                        //\n  // ************************************************* //\n  async pollConnextState() {\n    const { connext } = this.state.connext;\n    // register listeners\n    connext.on('onStateChange', state => {\n      console.log('Connext state changed:', state);\n      this.setState({\n        channelState: state.persistent.channel,\n        connextState: state,\n        runtime: state.runtime,\n        exchangeRate: state.runtime.exchangeRate ? state.runtime.exchangeRate.rates.USD : 0,\n      });\n    });\n    // start polling\n    await connext.start();\n  }\n\n  async poller() {\n    await this.autoDeposit();\n    await this.autoSwap();\n\n    setInterval(async () => {\n      await this.autoDeposit();\n      await this.autoSwap();\n    }, 1000);\n\n    setInterval(async () => {\n      await this.checkStatus();\n    }, 400);\n  }\n\n  async autoDeposit() {\n    const { address, tokenContract, customWeb3, connextState, tokenAddress } = this.state;\n    const balance = await customWeb3.eth.getBalance(address);\n    let tokenBalance = '0';\n    try {\n      tokenBalance = await tokenContract.methods.balanceOf(address).call();\n    } catch (e) {\n      console.warn(\n        `Error fetching token balance, are you sure the token address (addr: ${tokenAddress}) is correct for the selected network (id: ${await customWeb3.eth.net.getId()}))? Error: ${\n          e.message\n        }`,\n      );\n    }\n\n    if (balance !== '0' || tokenBalance !== '0') {\n      if (eth.utils.bigNumberify(balance).lte(DEPOSIT_MINIMUM_WEI)) {\n        // don't autodeposit anything under the threshold\n        return;\n      }\n      // only proceed with deposit request if you can deposit\n      if (!connextState || !connextState.runtime.canDeposit) {\n        // console.log(\"Cannot deposit\");\n        return;\n      }\n\n      const actualDeposit = {\n        amountWei: eth.utils\n          .bigNumberify(balance)\n          .sub(DEPOSIT_MINIMUM_WEI)\n          .toString(),\n        amountToken: tokenBalance,\n      };\n\n      if (actualDeposit.amountWei === '0' && actualDeposit.amountToken === '0') {\n        console.log(`Actual deposit is 0, not depositing.`);\n        return;\n      }\n\n      console.log(`Depositing: ${JSON.stringify(actualDeposit, null, 2)}`);\n      const depositRes = await this.state.connext.deposit(actualDeposit);\n      console.log(`Deposit Result: ${JSON.stringify(depositRes, null, 2)}`);\n    }\n  }\n\n  async autoSwap() {\n    const { channelState, connextState } = this.state;\n    if (!connextState || !connextState.runtime.canExchange) {\n      // console.log(\"Cannot exchange\");\n      return;\n    }\n    const weiBalance = eth.utils.bigNumberify(channelState.balanceWeiUser);\n    const tokenBalance = eth.utils.bigNumberify(channelState.balanceTokenUser);\n    if (channelState && weiBalance.gt(eth.utils.bigNumberify('0')) && tokenBalance.lte(HUB_EXCHANGE_CEILING)) {\n      console.log(`Exchanging ${channelState.balanceWeiUser} wei`);\n      await this.state.connext.exchange(channelState.balanceWeiUser, 'wei');\n    }\n  }\n\n  async checkStatus() {\n    const { channelState, runtime } = this.state;\n    let deposit = null;\n    let payment = null;\n    let withdraw = null;\n    if (runtime.syncResultsFromHub[0]) {\n      switch (runtime.syncResultsFromHub[0].update.reason) {\n        case 'ProposePendingDeposit':\n          deposit = 'PENDING';\n          break;\n        case 'ProposePendingWithdrawal':\n          withdraw = 'PENDING';\n          break;\n        case 'ConfirmPending':\n          withdraw = 'SUCCESS';\n          break;\n        case 'Payment':\n          payment = 'SUCCESS';\n          break;\n        default:\n          deposit = null;\n          withdraw = null;\n          payment = null;\n      }\n      await this.setState({ status: { deposit, withdraw, payment } });\n    }\n  }\n\n  // ************************************************* //\n  //                    Handlers                       //\n  // ************************************************* //\n  async authorizeHandler() {\n    const { hubUrl } = this.state.hubUrl;\n    const web3 = this.state.customWeb3;\n    const challengeRes = await axios.post(`${hubUrl}/auth/challenge`, {}, opts);\n\n    const hash = web3.utils.sha3(\n      `${HASH_PREAMBLE} ${web3.utils.sha3(challengeRes.data.nonce)} ${web3.utils.sha3('localhost')}`,\n    );\n\n    const signature = await web3.eth.personal.sign(hash, this.state.address);\n\n    try {\n      const authRes = await axios.post(\n        `${hubUrl}/auth/response`,\n        {\n          nonce: challengeRes.data.nonce,\n          address: this.state.address,\n          origin: 'localhost',\n          signature,\n        },\n        opts,\n      );\n      const { token } = authRes.data.token;\n      document.cookie = `hub.sid=${token}`;\n      console.log(`hub authentication cookie set: ${token}`);\n      const res = await axios.get(`${hubUrl}/auth/status`, opts);\n      if (res.data.success) {\n        this.setState({ authorized: true });\n        return res.data.success;\n      } else {\n        this.setState({ authorized: false });\n      }\n      console.log(`Auth status: ${JSON.stringify(res.data)}`);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async scanURL(amount, recipient) {\n    this.setState({\n      sendScanArgs: {\n        amount,\n        recipient,\n      },\n    });\n  }\n\n  async collateralHandler() {\n    console.log(`Requesting Collateral`);\n    const collateralRes = await this.state.connext.requestCollateral();\n    console.log(`Collateral result: ${JSON.stringify(collateralRes, null, 2)}`);\n  }\n\n  async closeConfirmations() {\n    const deposit = null;\n    const payment = null;\n    const withdraw = null;\n    this.setState({ status: { deposit, payment, withdraw } });\n  }\n}\n\nexport default Card;\n"],"file":"index.js"}