{"version":3,"sources":["../src/index.js"],"names":["HASH_PREAMBLE","DEPOSIT_ESTIMATED_GAS","BigNumber","HUB_EXCHANGE_CEILING","Web3","utils","toWei","CHANNEL_DEPOSIT_MAX","opts","headers","Authorization","withCredentials","Card","cb","address","web3","connext","tokenAddress","tokenContract","channelState","connextState","stateUpdateCallback","exchangeRate","hubUrl","rpcProvider","mnemonic","localStorage","getItem","delegateSigner","getAddressString","setWeb3","setConnext","setTokenContract","authorizeHandler","pollConnextState","setBrowserWalletMinimumBalance","poller","rpcUrl","providerOpts","ProviderOptions","approving","provider","customWeb3","options","user","eth","Contract","tokenAbi","e","console","log","that","on","state","persistent","channel","balance","balanceTokenUser","runtime","rates","USD","start","autoDeposit","autoSwap","setInterval","BN","getGasPrice","defaultGas","depositGasPrice","multipliedBy","minConvertable","CurrencyConvertable","CurrencyType","WEI","browserMinimumBalance","wei","toWEI","amount","dai","toUSD","getBalance","tokenBalance","methods","balanceOf","call","net","getId","message","warn","minWei","lt","canDeposit","channelDeposit","amountWei","toFixed","amountToken","weiDeposit","deposit","canExchange","weiBalance","balanceWeiUser","gt","lte","exchange","axios","post","challengeRes","data","sha3","nonce","hash","personal","sign","signature","origin","authRes","token","document","cookie","get","res","value","Number","isNaN","Error","payment","meta","purchaseId","payments","type","recipient","emptyAddress","secret","generateSecret","Math","pow","toString","paymentHandler","recipientAddress","recipientNeedsCollateral","paymentAmount","balanceError","isZero","isAddress","addressError","errorMessage","buy","paymentRes","redeem","substr","cents","substring","length","ceilingWei","BEI","min","amountBigNumber","weiToRefund","max","minus"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA,IAAMA,aAAa,GAAG,qCAAtB,C,CACA;;AACA,IAAMC,qBAAqB,GAAG,IAAIC,kBAAJ,CAAc,QAAd,CAA9B,C,CAAsD;;AACtD,IAAMC,oBAAoB,GAAG,IAAID,kBAAJ,CAAcE,aAAKC,KAAL,CAAWC,KAAX,CAAiB,IAAjB,EAAuB,OAAvB,CAAd,CAA7B,C,CAA6E;;AAC7E,IAAMC,mBAAmB,GAAG,IAAIL,kBAAJ,CAAcE,aAAKC,KAAL,CAAWC,KAAX,CAAiB,IAAjB,EAAuB,OAAvB,CAAd,CAA5B,C,CAA4E;;AAC5E,IAAME,IAAI,GAAG;AACXC,EAAAA,OAAO,EAAE;AACP,oBAAgB,iCADT;AAEPC,IAAAA,aAAa,EAAE;AAFR,GADE;AAKXC,EAAAA,eAAe,EAAE;AALN,CAAb,C,CAQA;;IACMC,I;;;AACJ,gBAAYC,EAAZ,EAAgB;AAAA;AACd;AACA;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,mBAAL,GAA2BR,EAA3B;AACA,SAAKS,YAAL,GAAoB,MAApB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACD,G,CAED;AACA;;;;;;;;;;;;;;;;;;;AACWD,gBAAAA,M,2DAAS,uB;AAAyBC,gBAAAA,W,2DAAc,uB;AACzD;AACMC,gBAAAA,Q,GAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,C;;uBACY,wBAAaF,QAAb,C;;;AAAvBG,gBAAAA,c;;uBACgBA,cAAc,CAACC,gBAAf,E;;;AAAhBf,gBAAAA,O;AACN,qBAAKA,OAAL,GAAeA,OAAf;AACA,qBAAKS,MAAL,GAAcA,MAAd;AACA,qBAAKC,WAAL,GAAmBA,WAAnB,C,CAEA;;;uBACM,KAAKM,OAAL,CAAaF,cAAb,EAA6BJ,WAA7B,EAA0CD,MAA1C,C;;;;uBACA,KAAKQ,UAAL,CAAgBR,MAAhB,C;;;;uBACA,KAAKS,gBAAL,E;;;;uBACA,KAAKC,gBAAL,E;;;;uBAGA,KAAKC,gBAAL,E;;;;uBACA,KAAKC,8BAAL,E;;;;uBACA,KAAKC,MAAL,E;;;iDAGCtB,O;;;;;;;;;;;;;;;QAGT;AACA;AACA;;;;;;;kDACcA,O,EAASuB,M,EAAQd,M;;;;;;AACvBe,gBAAAA,Y,GAAe,IAAIC,wBAAJ,CAAoBzB,OAApB,EAA6BuB,MAA7B,EAAqCd,MAArC,EAA6CiB,SAA7C,E;AACfC,gBAAAA,Q,GAAW,6BAAeH,YAAf,C;AACXI,gBAAAA,U,GAAa,IAAItC,YAAJ,CAASqC,QAAT,C;AACnB,qBAAK1B,IAAL,GAAY2B,UAAZ;;;;;;;;;;;;;;;;;;;;;kDAGenB,M;;;;;;AACToB,gBAAAA,O,GAAU;AACd5B,kBAAAA,IAAI,EAAE,KAAKA,IADG;AAEdQ,kBAAAA,MAAM,EAANA,MAFc;AAGdqB,kBAAAA,IAAI,EAAE,KAAK9B;AAHG,iB,EAMhB;;;uBACsB,+BAAiB6B,OAAjB,C;;;AAAhB3B,gBAAAA,O;AACN;AACA;AACA;AACA;AACA;AACA,qBAAKA,OAAL,GAAeA,OAAf;AACA,qBAAKC,YAAL,GAAoBD,OAAO,CAACR,IAAR,CAAaS,YAAjC;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,oBAAI;AACIC,kBAAAA,aADJ,GACoB,IAAI,KAAKH,IAAL,CAAU8B,GAAV,CAAcC,QAAlB,CAA2BC,mBAA3B,EAAqC,KAAK9B,YAA1C,CADpB;AAEF,uBAAKC,aAAL,GAAqBA,aAArB;AACD,iBAHD,CAGE,OAAO8B,CAAP,EAAU;AACVC,kBAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,CAA5C,EADU,CACsC;AACjD;;;;;;;;;;;;;;;QAGH;AACA;AACA;;;;;;;;;;;;;AAEQG,gBAAAA,I,GAAO,I,EACb;;AACA,qBAAKnC,OAAL,CAAaoC,EAAb,CAAgB,eAAhB,EAAiC,UAAAC,KAAK,EAAI;AACxC;AACA,sBAAIA,KAAK,CAACC,UAAN,CAAiBC,OAArB,EAA8B;AAC5B,wBAAMC,OAAO,GAAGH,KAAK,CAACC,UAAN,CAAiBC,OAAjB,CAAyBE,gBAAzC,CAD4B,CAE5B;;AACAN,oBAAAA,IAAI,CAAC9B,mBAAL,CAAyBmC,OAAzB;AACD;;AAEDL,kBAAAA,IAAI,CAAChC,YAAL,GAAoBkC,KAAK,CAACC,UAAN,CAAiBC,OAArC;AACAJ,kBAAAA,IAAI,CAAC/B,YAAL,GAAoBiC,KAApB;AACAF,kBAAAA,IAAI,CAAC7B,YAAL,GAAoB+B,KAAK,CAACK,OAAN,CAAcpC,YAAd,GAA6B+B,KAAK,CAACK,OAAN,CAAcpC,YAAd,CAA2BqC,KAA3B,CAAiCC,GAA9D,GAAoE,CAAxF;AACAT,kBAAAA,IAAI,CAACO,OAAL,GAAeL,KAAK,CAACK,OAArB;AACD,iBAZD,E,CAaA;;;uBACM,KAAK1C,OAAL,CAAa6C,KAAb,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAIA,KAAKC,WAAL,E;;;;uBACA,KAAKC,QAAL,E;;;AACN;AAEAC,gBAAAA,WAAW;AAAA;AAAA;AAAA;AAAA,0CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACJ,KAAI,CAACF,WAAL,EADI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAD,IAER,IAFQ,CAAX;AAIAE,gBAAAA,WAAW;AAAA;AAAA;AAAA;AAAA,0CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACJ,KAAI,CAACD,QAAL,EADI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAD,IAER,GAFQ,CAAX,C,CAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIQhD,gBAAAA,I,GAAuB,I,CAAvBA,I,EAAMK,Y,GAAiB,I,CAAjBA,Y;;sBACV,CAACL,IAAD,IAAS,CAACK,Y;;;;;;;;+BAES6C,W;;uBAASlD,IAAI,CAAC8B,GAAL,CAASqB,WAAT,E;;;;AAA1BC,gBAAAA,U;AACN;AACMC,gBAAAA,e,GAAkBnE,qBAAqB,CAACoE,YAAtB,CAAmC,IAAInE,kBAAJ,CAAc,CAAd,CAAnC,EAAqDmE,YAArD,CAAkEF,UAAlE,C,EACxB;;AACMG,gBAAAA,c,GAAiB,IAAIC,4BAAJ,CAAwBC,4BAAaC,GAArC,EAA0CL,eAA1C,EAA2D;AAAA,yBAAM,+BAAiBhD,YAAjB,CAAN;AAAA,iBAA3D,C;AAEjBsD,gBAAAA,qB,GAAwB;AAC5BC,kBAAAA,GAAG,EAAEL,cAAc,CAACM,KAAf,GAAuBC,MADA;AAE5BC,kBAAAA,GAAG,EAAER,cAAc,CAACS,KAAf,GAAuBF;AAFA,iB;AAK9B,qBAAKH,qBAAL,GAA6BA,qBAA7B;;;;;;;;;;;;;;;QAGF;AACA;;;;;;;;;;;;;AAGI5D,gBAAAA,O,GAQE,I,CARFA,O,EACAI,a,GAOE,I,CAPFA,a,EACAE,Y,GAME,I,CANFA,Y,EACAH,Y,GAKE,I,CALFA,Y,EACAK,Y,GAIE,I,CAJFA,Y,EACAE,W,GAGE,I,CAHFA,W,EACAT,I,GAEE,I,CAFFA,I,EACA2D,qB,GACE,I,CADFA,qB;;oBAEGlD,W;;;;;;;;;uBAEiBT,IAAI,CAAC8B,GAAL,CAASmC,UAAT,CAAoBlE,OAApB,C;;;AAAhB0C,gBAAAA,O;AAEFyB,gBAAAA,Y,GAAe,G;;;uBAEI/D,aAAa,CAACgE,OAAd,CAAsBC,SAAtB,CAAgCrE,OAAhC,EAAyCsE,IAAzC,E;;;AAArBH,gBAAAA,Y;;;;;;;gCAEAhC,O;8GACyEhC,Y;;uBAAgEF,IAAI,CAAC8B,GAAL,CAASwC,GAAT,CAAaC,KAAb,E;;;;gCACrI,cAAEC,O;;;8BAFEC,I;;;sBAONhC,OAAO,KAAK,GAAZ,IAAmByB,YAAY,KAAK,G;;;;;AAChCQ,gBAAAA,M,GAAS,IAAIvF,kBAAJ,CAAcwE,qBAAqB,CAACC,GAApC,C,EACf;AACA;;qBACI,IAAIzE,kBAAJ,CAAcsD,OAAd,EAAuBkC,EAAvB,CAA0BD,MAA1B,C;;;;;;;;sBAGA,CAACrE,YAAD,IAAiB,CAACA,YAAY,CAACsC,OAAb,CAAqBiC,UAAvC,IAAqDrE,YAAY,KAAK,M;;;;;;;;AAC1E;AAEMsE,gBAAAA,c,GAAiB;AACrBC,kBAAAA,SAAS,EAAE,IAAI3F,kBAAJ,CAAcsD,OAAd,EAAuBsC,OAAvB,CAA+B,CAA/B,CADU;AAErBC,kBAAAA,WAAW,EAAEd;AAFQ,iB;;sBAKnBW,cAAc,CAACC,SAAf,KAA6B,GAA7B,IAAoCD,cAAc,CAACG,WAAf,KAA+B,G;;;;;;;;AAEvE;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACMC,gBAAAA,U,GAAa,IAAI9F,kBAAJ,CAAc0F,cAAc,CAACC,SAA7B,C;AACnBD,gBAAAA,cAAc,CAACC,SAAf,GAA2BG,UAAU,CAACF,OAAX,CAAmB,CAAnB,CAA3B;;uBAEM,KAAK9E,OAAL,CAAaiF,OAAb,CAAqBL,cAArB,C;;;;;;;;;;;;;;;QAIV;;;;AAcA;;;;;;;;;;AAEUzE,gBAAAA,Y,GAA+B,I,CAA/BA,Y,EAAcC,Y,GAAiB,I,CAAjBA,Y;;sBAClB,CAACA,YAAD,IAAiB,CAACA,YAAY,CAACsC,OAAb,CAAqBwC,W;;;;;;;;AAErCC,gBAAAA,U,GAAa,IAAIjG,kBAAJ,CAAciB,YAAY,CAACiF,cAA3B,C;AACbnB,gBAAAA,Y,GAAe,IAAI/E,kBAAJ,CAAciB,YAAY,CAACsC,gBAA3B,C;;sBACjBtC,YAAY,IAAIgF,UAAU,CAACE,EAAX,CAAc,IAAInG,kBAAJ,CAAc,GAAd,CAAd,CAAhB,IAAqD+E,YAAY,CAACqB,GAAb,CAAiBnG,oBAAjB,C;;;;;;uBAEjD,KAAKa,OAAL,CAAauF,QAAb,CAAsBpF,YAAY,CAACiF,cAAnC,EAAmD,KAAnD,C;;;;;;;;;;;;;;;QAIV;AACA;AACA;;;;;;;;;;;;;AAEUrF,gBAAAA,I,GAAS,I,CAATA,I;;uBACmByF,eAAMC,IAAN,WAAc,KAAKlF,MAAnB,sBAA4C,EAA5C,EAAgDf,IAAhD,C;;;AAArBkG,gBAAAA,Y;AAEAC,gBAAAA,I,aAAU3G,a,cAAiBe,IAAI,CAACV,KAAL,CAAWuG,IAAX,CAAgBF,YAAY,CAACC,IAAb,CAAkBE,KAAlC,C,cAA4C9F,IAAI,CAACV,KAAL,CAAWuG,IAAX,CAAgB,WAAhB,C;AACvEE,gBAAAA,I,GAAO/F,IAAI,CAACV,KAAL,CAAWuG,IAAX,CAAgBD,IAAhB,C;;uBACW5F,IAAI,CAAC8B,GAAL,CAASkE,QAAT,CAAkBC,IAAlB,CAAuBF,IAAvB,EAA6B,KAAKhG,OAAlC,EAA2C,IAA3C,C;;;AAAlBmG,gBAAAA,S;;;uBAGkBT,eAAMC,IAAN,WACjB,KAAKlF,MADY,qBAEpB;AACEsF,kBAAAA,KAAK,EAAEH,YAAY,CAACC,IAAb,CAAkBE,KAD3B;AAEE/F,kBAAAA,OAAO,EAAE,KAAKA,OAFhB;AAGEoG,kBAAAA,MAAM,EAAE,WAHV;AAIED,kBAAAA,SAAS,EAATA;AAJF,iBAFoB,EAQpBzG,IARoB,C;;;AAAhB2G,gBAAAA,O;AAUEC,gBAAAA,K,GAAUD,OAAO,CAACR,I,CAAlBS,K;AACRC,gBAAAA,QAAQ,CAACC,MAAT,qBAA6BF,KAA7B,E,CACA;;;uBACkBZ,eAAMe,GAAN,WAAa,KAAKhG,MAAlB,mBAAwCf,IAAxC,C;;;AAAZgH,gBAAAA,G;;;;;;;AAINvE,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;QAIJ;AACA;AACA;;;;;;;mDAC6BuE,K;;;;;;AACnBzG,gBAAAA,O,GAAY,I,CAAZA,O;;qBACJ0G,MAAM,CAACC,KAAP,CAAaF,KAAb,C;;;;;sBAA2B,IAAIG,KAAJ,CAAU,uBAAV,C;;;AAE/B;AACA;AACMC,gBAAAA,O,GAAU;AACdC,kBAAAA,IAAI,EAAE;AAAEC,oBAAAA,UAAU,EAAE;AAAd,mBADQ;AAEdC,kBAAAA,QAAQ,EAAE,CACR;AACEC,oBAAAA,IAAI,EAAE,SADR;AAEEC,oBAAAA,SAAS,EAAEC,mBAFb;AAGEC,oBAAAA,MAAM,EAAEpH,OAAO,CAACqH,cAAR,EAHV;AAIExD,oBAAAA,MAAM,EAAE;AACNkB,sBAAAA,WAAW,EAAE,CAAC0B,KAAK,GAAGa,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,EAAb,CAAT,EAA2BC,QAA3B,EADP;AAEN3C,sBAAAA,SAAS,EAAE;AAFL;AAJV,mBADQ;AAFI,iB;mDAeT,KAAK4C,cAAL,CAAoBZ,OAApB,C;;;;;;;;;;;;;;;;;;;;;mDAGaJ,K,EAAOiB,gB;;;;;;AACnB1H,gBAAAA,O,GAAY,I,CAAZA,O;;qBACJ0G,MAAM,CAACC,KAAP,CAAaF,KAAb,C;;;;;sBAA2B,IAAIG,KAAJ,CAAU,uBAAV,C;;;AAE/B;AACMC,gBAAAA,O,GAAU;AACdC,kBAAAA,IAAI,EAAE;AAAEC,oBAAAA,UAAU,EAAE;AAAd,mBADQ;AAEdC,kBAAAA,QAAQ,EAAE,CACR;AACEC,oBAAAA,IAAI,EAAE,YADR;AAEEC,oBAAAA,SAAS,EAAEQ,gBAFb;AAGEN,oBAAAA,MAAM,EAAEpH,OAAO,CAACqH,cAAR,EAHV;AAIExD,oBAAAA,MAAM,EAAE;AACNkB,sBAAAA,WAAW,EAAE,CAAC0B,KAAK,GAAGa,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,EAAb,CAAT,EAA2BC,QAA3B,EADP;AAEN3C,sBAAAA,SAAS,EAAE;AAFL;AAJV,mBADQ;AAFI,iB;mDAeT,KAAK4C,cAAL,CAAoBZ,OAApB,C;;;;;;;;;;;;;;;QAGT;AACA;AACA;;;;;;;mDACqBA,O;;;;;;AACX7G,gBAAAA,O,GAAgC,I,CAAhCA,O,EAASD,I,GAAuB,I,CAAvBA,I,EAAMI,Y,GAAiB,I,CAAjBA,Y,EAEvB;;;uBACMH,OAAO,CAAC2H,wBAAR,CACJd,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoBE,SADhB,EAEJ,2BAAe,KAAf,EAAsBL,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoBnD,MAA1C,CAFI,C;;;AAON;AACM+D,gBAAAA,a,GAAgB,2BAAe,IAAf,EAAqBf,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoBnD,MAAzC,C;;AACtB,oBAAI+D,aAAa,CAAC7C,WAAd,CAA0BM,EAA1B,CAA6B,IAAIpC,WAAJ,CAAO9C,YAAY,CAACsC,gBAApB,CAA7B,CAAJ,EAAyE;AACvEoF,kBAAAA,YAAY,GAAG,iCAAf;AACD;;AAED,oBAAID,aAAa,CAAC7C,WAAd,CAA0B+C,MAA1B,EAAJ,EAAwC;AACtCD,kBAAAA,YAAY,GAAG,uCAAf;AACD,iB,CAED;AACA;;;AACQX,gBAAAA,S,GAAcL,OAAO,CAACG,QAAR,CAAiB,CAAjB,C,CAAdE,S;;AACR,oBAAI,CAACnH,IAAI,CAACV,KAAL,CAAW0I,SAAX,CAAqBb,SAArB,CAAD,IAAoCA,SAAS,KAAKC,mBAAtD,EAAoE;AAClEa,kBAAAA,YAAY,GAAG,+BAAf;AACD,iB,CAED;;;sBACIH,YAAY,IAAIG,Y;;;;;AACZC,gBAAAA,Y,GAAeJ,YAAY,IAAIG,Y;sBAC/B,IAAIpB,KAAJ,CAAUqB,YAAV,C;;;;;uBAKiBjI,OAAO,CAACkI,GAAR,CAAYrB,OAAZ,C;;;AAAnBsB,gBAAAA,U;;sBAEAtB,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoBC,IAApB,KAA6B,S;;;;;mDACxBJ,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoBI,M;;;mDAEtB,I;;;;;sBAED,IAAIR,KAAJ,e;;;;;;;;;;;;;;;;;;;;;mDAIUQ,M;;;;;;AACVpH,gBAAAA,O,GAAwC,I,CAAxCA,O,EAASG,Y,GAA+B,I,CAA/BA,Y,EAAcC,Y,GAAiB,I,CAAjBA,Y;;sBAC3B,CAACJ,OAAD,IAAY,CAACG,YAAb,IAA6B,CAACC,Y;;;;;sBAAoB,IAAIwG,KAAJ,CAAU,wBAAV,C;;;oBAEjDQ,M;;;;;sBAAc,IAAIR,KAAJ,CAAU,4CAAV,C;;;;mDAIV5G,OAAO,CAACoI,MAAR,CAAehB,MAAf,C;;;;;sBAED,IAAIR,KAAJ,e;;;;;;;;;;;;;;;QAIV;AACA;AACA;;;;0CACsB9C,G,EAAK;AACzB;AACA,UAAMuE,MAAM,GAAGvE,GAAG,GAAG,4CAAmBA,GAAnB,CAAH,GAA6B,CAAC,GAAD,EAAM,IAAN,CAA/C;AACA,UAAIwE,KAAK,GAAGD,MAAM,CAAC,CAAD,CAAN,CAAUE,SAAV,CAAoB,CAApB,EAAuB,CAAvB,CAAZ;AACA,UAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwBF,KAAK,aAAMA,KAAN,MAAL;AACxB,uBAAUD,MAAM,CAAC,CAAD,CAAhB,cAAuBC,KAAvB;AACD;;;yCAtL2B3E,G,EAAKvD,Y,EAAc;AAC7C;AACA;AACA,UAAMqI,UAAU,GAAG,IAAIlF,4BAAJ,CACjBC,4BAAakF,GADI,EAEjBxJ,mBAAUyJ,GAAV,CAAcxJ,oBAAd,EAAoCI,mBAApC,CAFiB,EAGjB;AAAA,eAAM,+BAAiBa,YAAjB,CAAN;AAAA,OAHiB,EAIjBwD,KAJiB,GAITgF,eAJV;;AAMA,UAAMC,WAAW,GAAG3J,mBAAU4J,GAAV,CAAc,IAAI7F,WAAJ,CAAOU,GAAP,EAAYoF,KAAZ,CAAkBN,UAAlB,CAAd,EAA6C,IAAIxF,WAAJ,CAAO,CAAP,CAA7C,CAApB;;AACA,aAAO4F,WAAW,CAAC/D,OAAZ,CAAoB,CAApB,CAAP;AACD;;;;;eA8KYlF,I","sourcesContent":["import 'babel-polyfill';\nimport { getConnextClient } from 'connext/dist/Connext';\nimport axios from 'axios';\nimport Web3 from 'web3';\nimport { ethers } from 'ethers';\nimport { emptyAddress } from 'connext/dist/Utils';\nimport { convertPayment } from 'connext/dist/types';\nimport getExchangeRates from 'connext/dist/lib/getExchangeRates';\nimport { CurrencyType } from 'connext/dist/state/ConnextState/CurrencyTypes';\nimport CurrencyConvertable from 'connext/dist/lib/currency/CurrencyConvertable';\n\nimport BigNumber from 'bignumber.js';\nimport BN from 'bn.js';\n\nimport ProviderOptions from './utils/ProviderOptions';\nimport clientProvider from './utils/web3/clientProvider';\nimport { getDollarSubstring } from './utils/getDollarSubstring';\nimport createWallet from './walletGen';\nimport tokenAbi from './abi/humanToken.json';\n\n// set constants\nconst HASH_PREAMBLE = 'SpankWallet authentication message:';\n// const DEPOSIT_MINIMUM_WEI = ethers.utils.parseEther('0.03'); // 30 FIN\nconst DEPOSIT_ESTIMATED_GAS = new BigNumber('700000') // 700k gas\nconst HUB_EXCHANGE_CEILING = new BigNumber(Web3.utils.toWei('69', 'ether')); // 69 TST\nconst CHANNEL_DEPOSIT_MAX = new BigNumber(Web3.utils.toWei('30', 'ether')); // 30 TST\nconst opts = {\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8',\n    Authorization: 'Bearer foo',\n  },\n  withCredentials: true,\n};\n\n// define class\nclass Card {\n  constructor(cb) {\n    // remove from a 'state'\n    // object and list under `this`\n    this.address = '';\n    this.web3 = {};\n    this.connext = {};\n    this.tokenAddress = null;\n    this.tokenContract = null;\n    this.channelState = null;\n    this.connextState = null;\n    this.stateUpdateCallback = cb;\n    this.exchangeRate = '0.00';\n    this.hubUrl = null;\n    this.rpcProvider = null;\n  }\n\n  // TODO: take in mnemonic so that users can\n  // generate wallet from another dapplication\n  async init(hubUrl = 'http://localhost:8080', rpcProvider = 'http://localhost:8545') {\n    // Set up wallet\n    const mnemonic = localStorage.getItem('mnemonic');\n    const delegateSigner = await createWallet(mnemonic);\n    const address = await delegateSigner.getAddressString();\n    this.address = address;\n    this.hubUrl = hubUrl;\n    this.rpcProvider = rpcProvider;\n\n    // set up web3 and connext\n    await this.setWeb3(delegateSigner, rpcProvider, hubUrl);\n    await this.setConnext(hubUrl);\n    await this.setTokenContract();\n    await this.authorizeHandler();\n\n    // start polling for state\n    await this.pollConnextState();\n    await this.setBrowserWalletMinimumBalance();\n    await this.poller();\n\n    // return address\n    return address;\n  }\n\n  // ************************************************* //\n  //                State setters                      //\n  // ************************************************* //\n  async setWeb3(address, rpcUrl, hubUrl) {\n    const providerOpts = new ProviderOptions(address, rpcUrl, hubUrl).approving();\n    const provider = clientProvider(providerOpts);\n    const customWeb3 = new Web3(provider);\n    this.web3 = customWeb3;\n  }\n\n  async setConnext(hubUrl) {\n    const options = {\n      web3: this.web3,\n      hubUrl,\n      user: this.address,\n    };\n\n    // *** Instantiate the connext client ***\n    const connext = await getConnextClient(options);\n    // console.log(`Successfully set up connext! Connext config:`);\n    // console.log(`  - tokenAddress: ${connext.opts.tokenAddress}`);\n    // console.log(`  - hubAddress: ${connext.opts.hubAddress}`);\n    // console.log(`  - contractAddress: ${connext.opts.contractAddress}`);\n    // console.log(`  - ethNetworkId: ${connext.opts.ethNetworkId}`);\n    this.connext = connext;\n    this.tokenAddress = connext.opts.tokenAddress;\n  }\n\n  async setTokenContract() {\n    try {\n      const tokenContract = new this.web3.eth.Contract(tokenAbi, this.tokenAddress);\n      this.tokenContract = tokenContract;\n    } catch (e) {\n      console.log('Error setting token contract', e); // eslint-disable-line\n    }\n  }\n\n  // ************************************************* //\n  //                    Pollers                        //\n  // ************************************************* //\n  async pollConnextState() {\n    const that = this;\n    // register listeners\n    this.connext.on('onStateChange', state => {\n      // console.log('STATE cHANEGE', state)\n      if (state.persistent.channel) {\n        const balance = state.persistent.channel.balanceTokenUser;\n        // balance is in Dai, return via callback so app/service can process usd amount\n        that.stateUpdateCallback(balance);\n      }\n\n      that.channelState = state.persistent.channel;\n      that.connextState = state;\n      that.exchangeRate = state.runtime.exchangeRate ? state.runtime.exchangeRate.rates.USD : 0;\n      that.runtime = state.runtime;\n    });\n    // start polling\n    await this.connext.start();\n  }\n\n  async poller() {\n    await this.autoDeposit();\n    await this.autoSwap();\n    // await this.connext.requestCollateral();\n\n    setInterval(async () => {\n      await this.autoDeposit();\n    }, 5000);\n\n    setInterval(async () => {\n      await this.autoSwap();\n    }, 500);\n\n    // setInterval(async () => {\n    //   await this.checkStatus();\n    // }, 400)\n  }\n\n  async setBrowserWalletMinimumBalance() {\n    const { web3, connextState } = this;\n    if (!web3 || !connextState) return;\n\n    const defaultGas = new BN(await web3.eth.getGasPrice())\n    // default connext multiple is 1.5, leave 2x for safety\n    const depositGasPrice = DEPOSIT_ESTIMATED_GAS.multipliedBy(new BigNumber(2)).multipliedBy(defaultGas);\n    // add dai conversion\n    const minConvertable = new CurrencyConvertable(CurrencyType.WEI, depositGasPrice, () => getExchangeRates(connextState));\n\n    const browserMinimumBalance = {\n      wei: minConvertable.toWEI().amount,\n      dai: minConvertable.toUSD().amount,\n    }\n\n    this.browserMinimumBalance = browserMinimumBalance;\n  }\n\n  // TODO: figure out why after proposing a deposit\n  // it halts awaiting a confirm \n  async autoDeposit() {\n    const {\n      address,\n      tokenContract,\n      connextState,\n      tokenAddress,\n      exchangeRate,\n      rpcProvider,\n      web3,\n      browserMinimumBalance,\n    } = this;\n    if (!rpcProvider) return;\n\n    const balance = await web3.eth.getBalance(address);\n\n    let tokenBalance = '0';\n    try {\n      tokenBalance = await tokenContract.methods.balanceOf(address).call();\n    } catch (e) {\n      console.warn(\n        `Error fetching token balance, are you sure the token address (addr: ${tokenAddress}) is correct for the selected network (id: ${await web3.eth.net.getId()}))? Error: ${\n          e.message\n        }`\n      );\n    }\n\n    if (balance !== '0' || tokenBalance !== '0') {\n      const minWei = new BigNumber(browserMinimumBalance.wei);\n      // don't autodeposit anything under the threshold\n      // update the refunding variable before returning\n      if (new BigNumber(balance).lt(minWei)) return;\n\n      // only proceed with deposit request if you can deposit\n      if (!connextState || !connextState.runtime.canDeposit || exchangeRate === '0.00') return;\n      // if (!connextState || exchangeRate === '0.00') return;\n\n      const channelDeposit = {\n        amountWei: new BigNumber(balance).toFixed(0),\n        amountToken: tokenBalance,\n      };\n\n      if (channelDeposit.amountWei === '0' && channelDeposit.amountToken === '0') return;\n\n      // if amount to deposit into channel is over the channel max\n      // then return excess deposit to the sending account\n      // const weiToReturn = this.constructor.calculateWeiToRefund(channelDeposit.amountWei, connextState);\n\n      // return wei to sender\n      // if (weiToReturn !== '0') {\n      //   // await this.returnWei(weiToReturn);\n      //   return;\n      // }\n\n      // update channel deposit\n      // const weiDeposit = new BigNumber(channelDeposit.amountWei).minus(new BigNumber(weiToReturn)); // with refund happening... we are removing that\n      const weiDeposit = new BigNumber(channelDeposit.amountWei);\n      channelDeposit.amountWei = weiDeposit.toFixed(0);\n\n      await this.connext.deposit(channelDeposit);\n    }\n  }\n\n  // returns a BigNumber\n  static calculateWeiToRefund(wei, connextState) {\n    // channel max tokens is minimum of the ceiling that\n    // the hub would exchange, or a set deposit max\n    const ceilingWei = new CurrencyConvertable(\n      CurrencyType.BEI,\n      BigNumber.min(HUB_EXCHANGE_CEILING, CHANNEL_DEPOSIT_MAX),\n      () => getExchangeRates(connextState)\n    ).toWEI().amountBigNumber;\n\n    const weiToRefund = BigNumber.max(new BN(wei).minus(ceilingWei), new BN(0));\n    return weiToRefund.toFixed(0);\n  }\n\n  // swapping wei for dai\n  async autoSwap() {\n    const { channelState, connextState } = this;\n    if (!connextState || !connextState.runtime.canExchange) return;\n\n    const weiBalance = new BigNumber(channelState.balanceWeiUser);\n    const tokenBalance = new BigNumber(channelState.balanceTokenUser);\n    if (channelState && weiBalance.gt(new BigNumber('0')) && tokenBalance.lte(HUB_EXCHANGE_CEILING)) {\n      // console.log(`Exchanging ${channelState.balanceWeiUser} wei`); // eslint-disable-line\n      await this.connext.exchange(channelState.balanceWeiUser, 'wei');\n    }\n  }\n\n  // ************************************************* //\n  //                    Handlers                       //\n  // ************************************************* //\n  async authorizeHandler() {\n    const { web3 } = this;\n    const challengeRes = await axios.post(`${this.hubUrl}/auth/challenge`, {}, opts);\n\n    const data = `${HASH_PREAMBLE} ${web3.utils.sha3(challengeRes.data.nonce)} ${web3.utils.sha3('localhost')}`;\n    const hash = web3.utils.sha3(data);\n    const signature = await web3.eth.personal.sign(hash, this.address, null);\n\n    try {\n      const authRes = await axios.post(\n        `${this.hubUrl}/auth/response`,\n        {\n          nonce: challengeRes.data.nonce,\n          address: this.address,\n          origin: 'localhost',\n          signature,\n        },\n        opts,\n      );\n      const { token } = authRes.data;\n      document.cookie = `hub.sid=${token}`;\n      // console.log(`hub authentication cookie set: ${token}`);\n      const res = await axios.get(`${this.hubUrl}/auth/status`, opts);\n      // console.log('res', res.data);\n      // console.log(`Auth status: ${JSON.stringify(res.data)}`);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  // ************************************************* //\n  //                  Send Funds                       //\n  // ************************************************* //\n  async generateRedeemableLink(value) {\n    const { connext } = this;\n    if (Number.isNaN(value)) throw new Error('Value is not a number');\n\n    // generate secret, set type, and set\n    // recipient to empty address\n    const payment = {\n      meta: { purchaseId: 'payment' },\n      payments: [\n        {\n          type: 'PT_LINK',\n          recipient: emptyAddress,\n          secret: connext.generateSecret(),\n          amount: {\n            amountToken: (value * Math.pow(10, 18)).toString(),\n            amountWei: '0',\n          },\n        }\n      ]\n    };\n\n    return this.paymentHandler(payment);\n  }\n\n  async generatePayment(value, recipientAddress) {\n    const { connext } = this;\n    if (Number.isNaN(value)) throw new Error('Value is not a number');\n\n    // generate secret, set type, and set\n    const payment = {\n      meta: { purchaseId: 'payment' },\n      payments: [\n        {\n          type: 'PT_CHANNEL',\n          recipient: recipientAddress,\n          secret: connext.generateSecret(),\n          amount: {\n            amountToken: (value * Math.pow(10, 18)).toString(),\n            amountWei: '0',\n          },\n        }\n      ],\n    };\n\n    return this.paymentHandler(payment);\n  }\n\n  // returns true on a successful payment to address\n  // return the secret on a successful link generation\n  // otherwise throws an error\n  async paymentHandler(payment) {\n    const { connext, web3, channelState } = this;\n\n    // check if the recipient needs collateral\n    await connext.recipientNeedsCollateral(\n      payment.payments[0].recipient,\n      convertPayment('str', payment.payments[0].amount)\n    );\n\n    let balanceError, addressError;\n\n    // validate that the token amount is within bounds\n    const paymentAmount = convertPayment('bn', payment.payments[0].amount);\n    if (paymentAmount.amountToken.gt(new BN(channelState.balanceTokenUser))) {\n      balanceError = 'Insufficient balance in channel';\n    }\n\n    if (paymentAmount.amountToken.isZero()) {\n      balanceError = 'Please enter a payment amount above 0';\n    }\n\n    // validate recipient is valid address OR the empty address\n    // TODO: handle in other functions that structure payment object\n    const { recipient } = payment.payments[0];\n    if (!web3.utils.isAddress(recipient) && recipient !== emptyAddress) {\n      addressError = 'Please choose a valid address';\n    }\n\n    // return if either errors exist\n    if (balanceError || addressError) {\n      const errorMessage = balanceError || addressError;\n      throw new Error(errorMessage);\n    }\n\n    // otherwise make payment\n    try {\n      let paymentRes = await connext.buy(payment);\n      // console.log(`Payment result: ${JSON.stringify(paymentRes, null, 2)}`);\n      if (payment.payments[0].type === 'PT_LINK') {\n        return payment.payments[0].secret;\n      }\n      return true;\n    } catch (e) {\n      throw new Error(e);\n    }\n  }\n\n  async redeemPayment(secret) {\n    const { connext, channelState, connextState } = this;\n    if (!connext || !channelState || !connextState) throw new Error('Connext not configured');\n\n    if (!secret) throw new Error('No secret detected, cannot redeem payment.');\n\n    // user is not payor, can redeem payment\n    try {\n      return connext.redeem(secret);\n    } catch (e) {\n      throw new Error(e);\n    }\n  }\n\n  // ************************************************* //\n  //                    Helper                         //\n  // ************************************************* //\n  convertDaiToUSDString(dai) {\n    // const balance = state.persistent.channel.balanceTokenUser;\n    const substr = dai ? getDollarSubstring(dai) : ['0', '00'];\n    let cents = substr[1].substring(0, 2);\n    if (cents.length === 1) cents = `${cents}0`;\n    return `${substr[0]}.${cents}`;\n  }\n}\n\nexport default Card;\n"],"file":"index.js"}