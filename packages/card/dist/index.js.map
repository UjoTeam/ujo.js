{"version":3,"sources":["../src/index.js"],"names":["Big","n","eth","utils","bigNumberify","toString","Connext","Utils","getExchangeRates","hasPendingOps","emptyAddress","constants","AddressZero","convertPayment","convert","Payment","DEPOSIT_ESTIMATED_GAS","HUB_EXCHANGE_CEILING","WeiPerEther","mul","CHANNEL_DEPOSIT_MAX","constructorError","CollateralStates","PaymentMade","Timeout","Success","validateAmount","ogValue","value","decimal","startsWith","substr","split","length","Error","Web3","toWei","Card","opts","onStateUpdate","hubUrl","rpcProvider","domain","address","web3","connext","tokenAddress","tokenContract","channelState","connextState","exchangeRate","existingMnemonic","mnemonic","localStorage","getItem","Wallet","createRandom","setItem","setWeb3","setConnext","setTokenContract","pollConnextState","setBrowserWalletMinimumBalance","poller","provider","providers","JsonRpcProvider","options","ethUrl","logLevel","createClient","wallet","getAddress","Contract","tokenAbi","e","console","log","that","on","state","persistent","channel","balance","balanceTokenUser","runtime","rates","DAI","start","autoDeposit","autoSwap","setInterval","getGasPrice","gasPrice","totalDepositGasWei","minDeposit","Currency","WEI","maxDeposit","DEI","getBalance","toHexString","tokenBalance","balanceOf","JSON","getNetwork","stringify","message","warn","gt","Zero","minWei","toWEI","floor","lt","deposit","submitted","withdrawal","collateral","channelDeposit","amountWei","sub","amountToken","eq","weiBalance","balanceWeiUser","lte","exchange","isNaN","payment","meta","purchaseId","payments","type","recipient","secret","generateSecret","paymentHandler","recipientAddress","act","paymentVal","paymentAmount","balanceError","isZero","isAddress","addressError","errorMessage","recipientNeedsCollateral","needsCollateral","collateralizeRecipient","collateralizationStatus","sendPayment","buy","paymentRes","success","iteration","stop","iterations","redeem","originalRecipient","withdrawEth","toLowerCase","isHexString","arrayify","withdrawalVal","createWithdrawValues","withdraw","tokensToSell","withdrawalWeiUser","weiToSell","withdrawalTokenUser","custodialBalance","add","balanceToken","balanceWei","dai","cents","substring"],"mappings":"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","sourcesContent":["import 'babel-polyfill';\nimport * as Connext from 'connext';\nimport { ethers as eth } from 'ethers';\nimport Web3 from 'web3';\nimport interval from 'interval-promise';\n\nimport { getDollarSubstring } from './utils/getDollarSubstring';\nimport tokenAbi from './abi/humanToken.json';\n\n// set constants\nconst Big = n => eth.utils.bigNumberify(n.toString());\nconst { getExchangeRates, hasPendingOps } = new Connext.Utils();\nconst emptyAddress = eth.constants.AddressZero;\nconst convertPayment = Connext.convert.Payment;\nconst DEPOSIT_ESTIMATED_GAS = Big('700000'); // 700k gas\nconst HUB_EXCHANGE_CEILING = eth.constants.WeiPerEther.mul(Big(69)); // 69 TST\nconst CHANNEL_DEPOSIT_MAX = eth.constants.WeiPerEther.mul(Big(30)); // 30 TST\n\nconst constructorError = 'Card constructor takes one object as an argument with \"hubUrl\", \"rpcProvider\", and \"onStateUpdate\" as properties.';\nconst CollateralStates = {\n  PaymentMade: 0,\n  Timeout: 1,\n  Success: 2,\n};\n\nconst validateAmount = ogValue => {\n  const value = ogValue.toString();\n  const decimal = value.startsWith('.') ? value.substr(1) : value.split('.')[1];\n\n  // if there are more than 18 digits after the decimal, do not count them\n  if (decimal && decimal.length > 18) {\n    throw new Error('Value is too precise. Please keep it to maximum 18 decimal points');\n    // balanceError = `Value too precise! Using ${tokenVal}`\n  } else return Web3.utils.toWei(`${value}`, 'ether');\n}\n\n// define class\nclass Card {\n  constructor(opts) {\n    if (typeof opts !== 'object') throw new Error(constructorError);\n\n    // passed in options\n    this.onStateUpdate = opts.onStateUpdate ? opts.onStateUpdate : () => {};\n    this.hubUrl = opts.hubUrl ? opts.hubUrl : 'http://localhost:8080';\n    this.rpcProvider = opts.rpcProvider ? opts.rpcProvider : 'http://localhost:8545';\n    this.domain = opts.domain ? opts.domain : 'localhost';\n\n    this.address = '';\n    this.web3 = {};\n    this.connext = {};\n    this.tokenAddress = null;\n    this.tokenContract = null;\n    this.channelState = null;\n    this.connextState = null;\n    this.exchangeRate = '0.00';\n\n    this.validateAmount = validateAmount;\n  }\n\n  async init(existingMnemonic) {\n    // check if mnemonic is passed or exists in LS\n    const mnemonic = existingMnemonic || localStorage.getItem('mnemonic') || eth.Wallet.createRandom().mnemonic;\n    if (!localStorage.getItem('mnemonic')) localStorage.setItem('mnemonic', mnemonic);\n\n    // set up web3 and connext\n    await this.setWeb3();\n    await this.setConnext(mnemonic);\n    await this.setTokenContract();\n\n    // start polling for state\n    await this.pollConnextState();\n    await this.setBrowserWalletMinimumBalance();\n    await this.poller();\n\n    // return address\n    return this.address;\n  }\n\n  // ************************************************* //\n  //                State setters                      //\n  // ************************************************* //\n  async setWeb3() {\n    const provider = new eth.providers.JsonRpcProvider(this.rpcProvider);\n    this.web3 = provider;\n  }\n\n  async setConnext(mnemonic) {\n    const options = {\n      hubUrl: this.hubUrl,\n      mnemonic,\n      ethUrl: this.rpcProvider, // Note: can use hubs eth provider by omitting this as well\n      logLevel: 5,\n      // user: this.address,\n      // origin: this.domain,\n    };\n\n    // *** Instantiate the connext client ***\n    // *** Create Address ***\n    this.connext = await Connext.createClient(options);\n    this.tokenAddress = this.connext.opts.tokenAddress;\n    this.address = await this.connext.wallet.getAddress();\n    // console.log(`Successfully set up connext! Connext config:`);\n    // console.log(`  - tokenAddress: ${this.connext.opts.tokenAddress}`);\n    // console.log(`  - hubAddress: ${this.connext.opts.hubAddress}`);\n    // console.log(`  - contractAddress: ${this.connext.opts.contractAddress}`);\n    // console.log(`  - ethNetworkId: ${this.connext.opts.ethNetworkId}`);\n  }\n\n  async setTokenContract() {\n    try {\n      const tokenContract = new eth.Contract(this.tokenAddress, tokenAbi, this.web3);\n      this.tokenContract = tokenContract;\n    } catch (e) {\n      console.log('Error setting token contract', e); // eslint-disable-line\n    }\n  }\n\n  // ************************************************* //\n  //                    Pollers                        //\n  // ************************************************* //\n  async pollConnextState() {\n    const that = this;\n    // register listeners\n    this.connext.on('onStateChange', state => {\n      if (state.persistent.channel) {\n        const balance = state.persistent.channel.balanceTokenUser;\n        // balance is in Dai, return via callback so app/service can process usd amount\n        that.onStateUpdate(balance);\n      }\n\n      that.channelState = state.persistent.channel;\n      that.connextState = state;\n      that.exchangeRate = state.runtime.exchangeRate ? state.runtime.exchangeRate.rates.DAI : 0;\n      that.runtime = state.runtime;\n      console.log('Connext updated:', state)\n    });\n\n    // start polling\n    await this.connext.start();\n  }\n\n  async poller() {\n    await this.autoDeposit();\n    await this.autoSwap();\n\n    setInterval(async () => {\n      await this.autoDeposit();\n    }, 5000);\n\n    setInterval(async () => {\n      await this.autoSwap();\n    }, 500);\n\n    // setInterval(async () => {\n    //   await this.checkStatus();\n    // }, 400)\n  }\n\n  async setBrowserWalletMinimumBalance() {\n    const { web3, connextState } = this;\n    if (!web3 || !connextState) return;\n\n    const gasPrice = await this.web3.getGasPrice();\n\n    // default connext multiple is 1.5, leave 2x for safety\n    const totalDepositGasWei = DEPOSIT_ESTIMATED_GAS.mul(Big(2)).mul(gasPrice);\n\n    this.minDeposit = Connext.Currency.WEI(totalDepositGasWei, () => getExchangeRates(connextState));\n    this.maxDeposit = Connext.Currency.DEI(CHANNEL_DEPOSIT_MAX, () => getExchangeRates(connextState));\n  }\n\n  async autoDeposit() {\n    const { address, tokenContract, connextState, tokenAddress, rpcProvider, web3, minDeposit } = this;\n    if (!rpcProvider || !minDeposit) return;\n\n    const balance = await web3.getBalance(address);\n    const gasPrice = (await web3.getGasPrice()).toHexString();\n\n    let tokenBalance = '0';\n    try {\n      tokenBalance = await tokenContract.balanceOf(address);\n    } catch (e) {\n      console.warn(\n        `Error fetching token balance, are you sure the token address (addr: ${tokenAddress}) is correct for the selected network (id: ${JSON.stringify(\n          await web3.getNetwork()\n        )}))? Error: ${e.message}`,\n      );\n      return;\n    }\n\n    if (balance.gt(eth.constants.Zero) || tokenBalance.gt(eth.constants.Zero)) {\n      const minWei = minDeposit.toWEI().floor()\n      // don't autodeposit anything under the threshold\n      // update the refunding variable before returning\n      if (balance.lt(minWei)) return;\n\n      // only proceed with deposit request if you can deposit\n      if (!connextState) return;\n\n      if (\n        // something was submitted\n        connextState.runtime.deposit.submitted ||\n        connextState.runtime.withdrawal.submitted ||\n        connextState.runtime.collateral.submitted\n      ) {\n        console.log(`Deposit or withdrawal transaction in progress, will not auto-deposit`);\n        return;\n      }\n\n      const channelDeposit = {\n        amountWei: balance.sub(minWei),\n        amountToken: tokenBalance,\n      };\n\n      if (channelDeposit.amountWei.eq(eth.constants.Zero) && channelDeposit.amountToken.eq(eth.constants.Zero)) return;\n\n      await this.connext.deposit(\n        {\n          amountWei: channelDeposit.amountWei.toString(),\n          amountToken: channelDeposit.amountToken.toString(),\n        },\n        { gasPrice },\n      );\n    }\n  }\n\n  // swapping wei for dai\n  async autoSwap() {\n    const { channelState, connextState } = this;\n    if (!connextState || hasPendingOps(channelState)) return;\n\n    const weiBalance = Big(channelState.balanceWeiUser);\n    const tokenBalance = Big(channelState.balanceTokenUser);\n    if (channelState && weiBalance.gt(Big('0')) && tokenBalance.lte(HUB_EXCHANGE_CEILING)) {\n      await this.connext.exchange(channelState.balanceWeiUser, 'wei');\n    }\n  }\n\n  // ************************************************* //\n  //                  Send Funds                       //\n  // ************************************************* //\n\n  async generateRedeemableLink(value) {\n    const { connext } = this;\n    if (isNaN(value)) throw new Error('Value is not a number');\n    value = this.validateAmount(value);\n\n    // generate secret, set type, and set\n    // recipient to empty address\n    const payment = {\n      meta: { purchaseId: 'ujo' },\n      payments: [\n        {\n          type: 'PT_LINK',\n          recipient: emptyAddress,\n          amountToken: value,\n          amountWei: '0',\n          meta: { secret: connext.generateSecret() },\n        }\n      ],\n    };\n\n    return this.paymentHandler(payment);\n  }\n\n  async generatePayment(value, recipientAddress) {\n    if (isNaN(value)) throw new Error('Value is not a number');\n    value = this.validateAmount(value);\n\n    // generate secret, set type, and set\n    const payment = {\n      meta: { purchaseId: 'ujo' },\n      payments: [\n        {\n          type: 'PT_OPTIMISTIC', // only optimistic for now 'PT_CHANNEL',\n          recipient: recipientAddress,\n          amountToken: value,\n          amountWei: '0',\n        }\n      ],\n    };\n\n    const act = await this.paymentHandler(payment);\n    return act;\n  }\n\n  // returns true on a successful payment to address\n  // return the secret on a successful link generation\n  // otherwise throws an error\n  async paymentHandler(paymentVal) {\n    const { connext, channelState } = this;\n\n    let balanceError;\n    let addressError;\n\n    // validate that the token amount is within bounds\n    const paymentAmount = convertPayment('bn', paymentVal.payments[0]);\n    if (paymentAmount.amountToken.gt(Big(channelState.balanceTokenUser))) {\n      balanceError = 'Insufficient balance in channel';\n    }\n\n    if (paymentAmount.amountToken.isZero()) {\n      balanceError = 'Please enter a payment amount above 0';\n    }\n\n    // validate recipient is valid address OR the empty address\n    // TODO: handle in other functions that structure payment object\n    const { recipient } = paymentVal.payments[0];\n    if (!Web3.utils.isAddress(recipient) && recipient !== emptyAddress) {\n      addressError = 'Please use a valid address';\n    }\n\n    // return if either errors exist\n    if (balanceError || addressError) {\n      const errorMessage = balanceError || addressError;\n      throw new Error(errorMessage);\n    }\n\n    // check if the recipient needs collateral\n    // is utilized later in fn. Consider in a v2\n    const needsCollateral = await connext.recipientNeedsCollateral(\n      paymentVal.payments[0].recipient,\n      convertPayment('str', {\n        amountWei: paymentVal.payments[0].amountWei,\n        amountToken: paymentVal.payments[0].amountToken,\n      }),\n    );\n\n    // collateralize recipient if not a link payment\n    // not used now as we do optimistic payments\n    if (needsCollateral && paymentVal.payments[0].type !== 'PT_LINK') {\n      // this can have 3 potential outcomes:\n      // - collateralization failed (return)\n      // - payment succeeded (return)\n      // - channel collateralized\n      const collateralizationStatus = await this.collateralizeRecipient(paymentVal);\n      switch (collateralizationStatus) {\n        // setting state for these cases done in collateralize\n        case CollateralStates.PaymentMade:\n          return true;\n        case CollateralStates.Timeout:\n          throw new Error('Collateralization of recipient timed out. Please try again.');\n          // return;\n        case CollateralStates.Success:\n          return await this.sendPayment(paymentVal);\n        default:\n          console.log('GOT In DEFAULT')\n          return await this.sendPayment(paymentVal);\n      }\n    } else {\n      return await this.sendPayment(paymentVal);\n    }\n  }\n\n  async sendPayment(paymentVal) {\n    const { connext } = this;\n\n    try {\n      let paymentRes = await connext.buy(paymentVal);\n      // console.log(`Payment result: ${JSON.stringify(paymentRes, null, 2)}`);\n      if (paymentVal.payments[0].type === 'PT_LINK') {\n        return paymentVal.payments[0].meta.secret;\n      }\n      return true;\n    } catch (e) {\n      console.log('error with payment', e)\n      throw new Error(e);\n    }\n  }\n\n  async collateralizeRecipient(paymentVal) {\n    const { connext } = this;\n\n    // collateralize by sending payment\n    try {\n      const success = await this.sendPayment(paymentVal);\n      // if success, return successful payment\n      if (success) return CollateralStates.PaymentMade;\n    }\n    catch (e) {\n      // do nothing\n    }\n\n    // call to send payment failed, monitor collateral\n    // watch for confirmation on the recipients side\n    // of the channel for 20s\n    let needsCollateral;\n    await interval(\n      async (iteration, stop) => {\n        // returns null if no collateral needed\n        needsCollateral = await connext.recipientNeedsCollateral(\n          paymentVal.payments[0].recipient,\n          convertPayment('str', {\n            amountWei: paymentVal.payments[0].amountWei,\n            amountToken: paymentVal.payments[0].amountToken,\n          }),\n        );\n        if (!needsCollateral || iteration > 20) {\n          stop();\n        }\n      }, 5000, { iterations: 20 }\n    );\n\n    if (needsCollateral) return CollateralStates.Timeout;\n    return CollateralStates.Success;\n  }\n\n  async redeemPayment(secret) {\n    const { connext, channelState, connextState } = this;\n    if (!connext || !channelState || !connextState) throw new Error('Connext not configured');\n\n    if (!secret) throw new Error('No secret detected, cannot redeem payment.');\n\n    // user is not payor, can redeem payment\n    try {\n      return connext.redeem(secret);\n    } catch (e) {\n      throw new Error(e);\n    }\n  }\n\n\n  // ************************************************* //\n  //                 Withdraw Funds                    //\n  // ************************************************* //\n  async withdrawalAllFunds(originalRecipient, withdrawEth = true) {\n    // TODO: add value to withdraw and check the input balance is under channel balance\n    const { connext } = this;\n    const recipient = originalRecipient.toLowerCase();\n\n    // check for valid address\n    if (!eth.utils.isHexString(recipient)) {\n      throw new Error(`Invalid recipient. Invalid hex string: ${originalRecipient}`);\n    }\n    if (eth.utils.arrayify(recipient).length !== 20) {\n      throw new Error(`Invalid recipient. Invalid length: ${originalRecipient}`);\n    }\n\n    const withdrawalVal = this.createWithdrawValues(recipient, withdrawEth);\n\n    console.log(`Withdrawing: ${JSON.stringify(withdrawalVal, null, 2)}`);\n    await connext.withdraw(withdrawalVal);\n  }\n\n  createWithdrawValues(recipient, withdrawEth) {\n    // set the state to contain the proper withdrawal args for\n    // eth or dai withdrawal\n    const { channelState, connextState, exchangeRate } = this;\n    let withdrawalVal = {\n      recipient,\n      exchangeRate,\n      tokensToSell: '0',\n      withdrawalWeiUser: '0',\n      weiToSell: '0',\n      withdrawalTokenUser: '0',\n    };\n\n    if (withdrawEth && channelState && connextState) {\n      const { custodialBalance } = connextState.persistent;\n      const amountToken = Big(channelState.balanceTokenUser).add(custodialBalance.balanceToken);\n      const amountWei = Big(channelState.balanceWeiUser).add(custodialBalance.balanceWei);\n\n      // withdraw all channel balance in eth\n      withdrawalVal = {\n        ...withdrawalVal,\n        tokensToSell: amountToken.toString(),\n        withdrawalWeiUser: amountWei.toString(),\n        weiToSell: '0',\n        withdrawalTokenUser: '0',\n      };\n    } else {\n      throw new Error('Not permitting withdrawal of tokens at this time');\n      // // handle withdrawing all channel balance in dai\n      // withdrawalVal = {\n      //   ...withdrawalVal,\n      //   tokensToSell: '0',\n      //   withdrawalWeiUser: '0',\n      //   weiToSell: channelState.balanceWeiUser,\n      //   withdrawalTokenUser: channelState.balanceTokenUser,\n      // };\n    }\n\n    return withdrawalVal;\n  }\n\n  // ************************************************* //\n  //                    Helper                         //\n  // ************************************************* //\n  convertDaiToUSDString(dai) {\n    // const balance = state.persistent.channel.balanceTokenUser;\n    const substr = dai ? getDollarSubstring(dai) : ['0', '00'];\n    let cents = substr[1].substring(0, 2);\n    if (cents.length === 1) cents = `${cents}0`;\n    return `${substr[0]}.${cents}`;\n  }\n}\n\nexport default Card;\n"],"file":"index.js"}