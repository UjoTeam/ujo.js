{"version":3,"sources":["../../../src/utils/web3/GaspriceSubprovider.js"],"names":["hubUrl","process","env","REACT_APP_HUB_URL","GWEI","BigNumber","MAX_PRICE","times","GaspriceSubprovider","payload","next","end","method","gas","estimateGasPriceFromHub","catch","err","console","warn","then","gasPrice","estimateGasPriceFromPreviousBlocks","toString","res","Promise","resolve","reject","emitPayload","lastBlock","result","blockNums","i","push","minus","gets","map","item","getBlock","all","blocks","min","meanGasPrice","params","transactions","sum","count","length","txns","j","currPrice","plus","dividedBy","Subprovider"],"mappings":"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","sourcesContent":["import Subprovider from 'web3-provider-engine/subproviders/subprovider';\nimport { BigNumber } from 'bignumber.js';\nimport requestJson from './request';\n\nconst hubUrl = process.env.REACT_APP_HUB_URL\n\nconst GWEI = new BigNumber('1e9')\nconst MAX_PRICE = GWEI.times(50)\n\n// interface Transaction {\n//   gasPrice: string\n// }\n\nexport default class GaspriceSubprovider extends Subprovider {\n  async handleRequest(payload, next, end) {\n    if (payload.method !== 'gas-estimate-latest') {\n      return next();\n    }\n\n    let gas = this.estimateGasPriceFromHub()\n\n    this.estimateGasPriceFromHub()\n      .catch(err => {\n        console.warn('Error fetching gas price from the hub (falling back to Web3):', err);\n        return null;\n      })\n      .then(gasPrice => {\n        if (!gasPrice) return this.estimateGasPriceFromPreviousBlocks();\n        return gasPrice;\n      })\n      .then(gasPrice => end(null, `0x${gasPrice.toString(16)}`), err => end(err))\n  }\n\n  async estimateGasPriceFromHub() {\n    const res = await requestJson(`${hubUrl}/gasPrice/estimate`);\n    if (res && res.gasPrice) return new BigNumber(res.gasPrice).times(GWEI);\n    return null\n  }\n\n  estimateGasPriceFromPreviousBlocks() {\n    return new Promise((resolve, reject) => {\n      this.emitPayload({ method: 'eth_blockNumber'}, (err, res) => {\n        let lastBlock = new BigNumber(res.result)\n        const blockNums = []\n\n        for (let i = 0; i < 10; i++) {\n          blockNums.push(`0x${lastBlock.toString(16)}`)\n          lastBlock = lastBlock.minus(1)\n        }\n\n        const gets = blockNums.map((item) => this.getBlock(item))\n\n        Promise.all(gets)\n          .then((blocks) => {\n            resolve(BigNumber.min(this.meanGasPrice(blocks), MAX_PRICE))\n          })\n          .catch(reject)\n      })\n    })\n  }\n\n  getBlock(item) {\n    return new Promise((resolve, reject) => this.emitPayload({ method: 'eth_getBlockByNumber', params: [ item, true ] }, (err, res) => {\n      if (err) return reject(err);\n\n      if (!res.result) return resolve([]);\n\n      resolve(res.result.transactions)\n    }));\n  }\n\n  meanGasPrice(blocks) {\n    let sum = new BigNumber(0)\n    let count = 0\n\n    for (let i = 0; i < blocks.length; i++) {\n      const txns = blocks[i]\n\n      for (let j = 0; j < txns.length; j++) {\n        const currPrice = new BigNumber(txns[j].gasPrice)\n        sum = sum.plus(currPrice)\n        count++\n      }\n    }\n\n    return sum.dividedBy(count)\n  }\n}\n"],"file":"GaspriceSubprovider.js"}