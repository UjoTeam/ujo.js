{"version":3,"sources":["../../src/utils/ProviderOptions.js"],"names":["ProviderOptions","wallet","rpcUrl","hubUrl","callback","address","getAddressString","txParams","rawTx","key","getPrivateKey","tx","Tx","sign","txHex","Buffer","from","serialize","toString","messageParams","msg","data","hashBuf","split","prefix","buf","concat","String","length","ethUtil","sha3","msgSig","ecsign","rawMsgSig","bufferToHex","sigUtil","concatSig","v","r","s","static","eth_syncing","web3_clientVersion","getAccounts","bind","approveTransaction","approveTransactionAlways","signTransaction","signMessage","signMessageAlways","signPersonalMessage"],"mappings":"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","sourcesContent":["import ethUtil from 'ethereumjs-util';\nimport sigUtil from 'eth-sig-util';\nimport Tx from 'ethereumjs-tx';\nimport { Buffer } from 'buffer';\n// require('dotenv').config()\n\nexport default class ProviderOptions {\n\n  constructor(wallet, rpcUrl, hubUrl) {\n    this.wallet = wallet;\n    this.rpcUrl = rpcUrl;\n    this.hubUrl = hubUrl;\n  }\n\n  getAccounts(callback) {\n    const address = this.wallet.getAddressString();\n    callback(null, address ? [address] : []);\n  }\n\n  approveTransactionAlways(txParams, callback) {\n    callback(null, true)\n  }\n\n  signTransaction(rawTx, callback) {\n    const key = this.wallet.getPrivateKey();\n\n    if (!key) return callback('Wallet is locked.');\n\n    const tx = new Tx(rawTx);\n    tx.sign(key);\n    const txHex = `0x${Buffer.from(tx.serialize()).toString('hex')}`;\n    callback(null, txHex);\n  }\n\n  signMessageAlways(messageParams, callback) {\n    const key = this.wallet.getPrivateKey();\n\n    if (!key) return callback('Wallet is locked.');\n\n    const msg = messageParams.data;\n\n    const hashBuf = Buffer.from(msg.split('x')[1], 'hex');\n    const prefix = Buffer.from('\\x19Ethereum Signed Message:\\n');\n    const buf = Buffer.concat([prefix, Buffer.from(String(hashBuf.length)), hashBuf]);\n\n    const data = ethUtil.sha3(buf);\n    const msgSig = ethUtil.ecsign(data, key);\n    const rawMsgSig = ethUtil.bufferToHex(sigUtil.concatSig(msgSig.v, msgSig.r, msgSig.s));\n    callback(null, rawMsgSig);\n  }\n\n  approving() {\n    return {\n      static: {\n        eth_syncing: false,\n        web3_clientVersion: `LiteratePayments/v${1.0}`,\n      },\n      rpcUrl: this.rpcUrl,\n      getAccounts: this.getAccounts.bind(this),\n      approveTransaction: this.approveTransactionAlways.bind(this),\n      signTransaction: this.signTransaction.bind(this),\n      signMessage: this.signMessageAlways.bind(this),\n      signPersonalMessage: this.signMessageAlways.bind(this),\n    }\n  }\n\n}\n"],"file":"ProviderOptions.js"}