{"version":3,"sources":["../../src/utils/ProviderOptions.js"],"names":["rpcUrl","hubUrl","DEFAULT_RPC_URL","Error","ProviderOptions","wallet","callback","address","getAddressString","console","log","txParams","rawTx","key","getPrivateKey","tx","Tx","sign","txHex","Buffer","from","serialize","toString","messageParams","msg","data","hashBuf","split","prefix","buf","concat","String","length","ethUtil","sha3","msgSig","ecsign","rawMsgSig","bufferToHex","sigUtil","concatSig","v","r","s","static","eth_syncing","web3_clientVersion","getAccounts","bind","approveTransaction","approveTransactionAlways","signTransaction","signMessage","signMessageAlways","signPersonalMessage"],"mappings":"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","sourcesContent":["import ethUtil from 'ethereumjs-util';\nimport sigUtil from 'eth-sig-util';\nimport Tx from 'ethereumjs-tx';\nimport { Buffer } from 'buffer';\n// require('dotenv').config()\n\n// TODO: fix hardcoded hub & rpc urls\nconst rpcUrl = 'http://localhost:8545';\nconst hubUrl = 'http://localhost:8080';\nexport const DEFAULT_RPC_URL = rpcUrl;\n// const DEFAULT_NETWORK = 'ropsten'\n// export const DEFAULT_RPC_URL = process.env.NODE_ENV === \"production\" ? process.env.REACT_APP_RINKEBY_RPC_URL : process.env.REACT_APP_LOCAL_RPC_URL\n\nif (!DEFAULT_RPC_URL)\n  throw new Error('Missing default ethereum provider url')\n\n// export type ApproveTransactionCallback = (error: string | null, isApproved?: boolean) => void\n// export type ApproveSignCallback = (error: string | null, rawMsgSig?: string) => void\n\nexport default class ProviderOptions {\n\n  constructor(wallet, rpcUrl) {\n    this.wallet = wallet;\n    this.rpcUrl = rpcUrl || DEFAULT_RPC_URL;\n  }\n  \n  getAccounts(callback) {\n    const address = this.wallet.getAddressString()\n    console.log('address', address);\n    callback(null, address ? [address] : [])\n  }\n\n  approveTransactionAlways(txParams, callback) {\n    callback(null, true)\n  }\n\n  signTransaction(rawTx, callback) {\n    const key = this.wallet.getPrivateKey()\n\n    if (!key) {\n      return callback('Wallet is locked.')\n    }\n\n    let tx = new Tx(rawTx)\n    tx.sign(key)\n    let txHex = '0x' + Buffer.from(tx.serialize()).toString('hex')\n    callback(null, txHex)\n  }\n\n  signMessageAlways(messageParams, callback) {\n    const key = this.wallet.getPrivateKey();\n\n    if (!key) {\n      return callback('Wallet is locked.');\n    }\n\n    const msg = messageParams.data;\n\n    const hashBuf = Buffer.from(msg.split('x')[1], 'hex');\n    const prefix = Buffer.from('\\x19Ethereum Signed Message:\\n');\n    const buf = Buffer.concat([prefix, Buffer.from(String(hashBuf.length)), hashBuf]);\n\n    const data = ethUtil.sha3(buf);\n    const msgSig = ethUtil.ecsign(data, key);\n    const rawMsgSig = ethUtil.bufferToHex(sigUtil.concatSig(msgSig.v, msgSig.r, msgSig.s));\n    callback(null, rawMsgSig);\n  }\n\n  approving() {\n    return {\n      static: {\n        eth_syncing: false,\n        web3_clientVersion: `LiteratePayments/v${1.0}`,\n      },\n      rpcUrl: this.rpcUrl,\n      getAccounts: this.getAccounts.bind(this),\n      approveTransaction: this.approveTransactionAlways.bind(this),\n      signTransaction: this.signTransaction.bind(this),\n      signMessage: this.signMessageAlways.bind(this),\n      signPersonalMessage: this.signMessageAlways.bind(this),\n    }\n  }\n\n}\n"],"file":"ProviderOptions.js"}