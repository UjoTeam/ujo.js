{"version":3,"sources":["../src/walletGen.js"],"names":["bip39","require","hdkey","createWallet","web3","console","log","mnemonic","generateMnemonic","fromMasterSeed","getWallet","wallet","localStorage","setItem","getAddressString","getPrivateKeyString","createWalletFromMnemonic","getStore","store"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;AACA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,yBAAD,CAArB;;SAEsBE,Y;;EAWtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;4BA1BO,iBAA4BC,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,YAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACMC,YAAAA,QAFD,GAEYP,KAAK,CAACQ,gBAAN,EAFZ;AAAA;AAAA,mBAGgBN,KAAK,CAACO,cAAN,CAAqBF,QAArB,EAA+BG,SAA/B,EAHhB;;AAAA;AAGCC,YAAAA,MAHD;AAIL;AACAC,YAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCF,MAAM,CAACG,gBAAP,EAAvC;AACAF,YAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCN,QAAjC;AACAK,YAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCF,MAAM,CAACI,mBAAP,EAAnC;AAPK,6CAQEJ,MARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA4BeK,wB;;;;;;;4BAAf,kBAAwCT,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGYL,KAAK,CAACO,cAAN,CAAqBF,QAArB,EAA+BG,SAA/B,EAHZ;;AAAA;AAGHC,YAAAA,MAHG;AAIHN,YAAAA,OAAO,CAACC,GAAR;AACAM,YAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCF,MAAM,CAACG,gBAAP,EAAvC;AACAF,YAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCN,QAAjC;AACAK,YAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCF,MAAM,CAACI,mBAAP,EAAnC;AAPG,8CAQIJ,MARJ;;AAAA;AAAA;AAAA;AAUHN,YAAAA,OAAO,CAACC,GAAR;AACAD,YAAAA,OAAO,CAACC,GAAR;;AAXG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeA,SAASW,QAAT,GAAoB;AACzB,MAAIC,UAAJ,EAAW;AACT,WAAOA,UAAP;AACD,GAFD,MAEO;AACLb,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD;AACF","sourcesContent":["import { store } from './App';\n// import * as ethers from \"ethers\";\nconst bip39 = require('bip39');\nconst hdkey = require('ethereumjs-wallet/hdkey');\n\nexport async function createWallet(web3) {\n  console.log('Creating new random wallet');\n  const mnemonic = bip39.generateMnemonic();\n  const wallet = await hdkey.fromMasterSeed(mnemonic).getWallet();\n  // const wallet = await web3.eth.accounts.create()\n  localStorage.setItem('delegateSigner', wallet.getAddressString());\n  localStorage.setItem('mnemonic', mnemonic);\n  localStorage.setItem('privateKey', wallet.getPrivateKeyString());\n  return wallet;\n}\n\n// export async function findOrCreateWallet(web3) {\n//   //let privateKey = localStorage.getItem(\"privateKey\");\n//   let mnemonic = localStorage.getItem(\"mnemonic\")\n//   let wallet;\n//   if (mnemonic) {\n//     wallet = await hdkey.fromMasterSeed(mnemonic).getWallet()\n//     console.log(\"found existing wallet:\", wallet.getAddressString());\n//   } else {\n//     wallet = await createWallet(web3);\n//   }\n//   store.dispatch({\n//     type: \"SET_WALLET\",\n//     text: wallet //Buffer.from(String(privKey.private),'hex')\n//   });\n//   return wallet;\n// }\n\nexport async function createWalletFromMnemonic(mnemonic) {\n  let wallet;\n  try {\n    wallet = await hdkey.fromMasterSeed(mnemonic).getWallet();\n    console.log(`Found wallet from mnemonic`);\n    localStorage.setItem('delegateSigner', wallet.getAddressString());\n    localStorage.setItem('mnemonic', mnemonic);\n    localStorage.setItem('privateKey', wallet.getPrivateKeyString());\n    return wallet;\n  } catch (e) {\n    console.log(`error in WalletGen`);\n    console.log(e);\n  }\n}\n\nexport function getStore() {\n  if (store) {\n    return store;\n  } else {\n    console.log('no store found');\n  }\n}\n"],"file":"walletGen.js"}