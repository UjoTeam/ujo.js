{"version":3,"sources":["../src/ujoStorage.js"],"names":["ujoStorage","provider","storageProvider","endpoint","params","toLowerCase","fetchMetadataByQueryParameter","queryParam","axios","get"],"mappings":";;;;;;;;;AAAA;;AAEA;;;;;;;;;;AAWe,SAASA,UAAT,CAAoBC,QAApB,EAA8B;AAC3C,MAAIC,eAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,MAAJ;AACA,MAAI,CAACH,QAAL,EAAeC,eAAe,GAAG,UAAUD,QAAQ,CAACI,WAAT,EAA5B;;AAEf,UAAQH,eAAR;AACE,SAAK,MAAL;AACEC,MAAAA,QAAQ,GAAG,6BAAX;AACAC,MAAAA,MAAM,GAAG,oBAAT;AACA;;AACF;AACED,MAAAA,QAAQ,GAAG,6BAAX;AACAC,MAAAA,MAAM,GAAG,oBAAT;AAPJ;;AASA,SAAO;AACLE,IAAAA,6BAA6B,EAAE,uCAAAC,UAAU;AAAA,aAAIC,eAAMC,GAAN,WAAaN,QAAb,cAAyBC,MAAzB,cAAmCG,UAAnC,EAAJ;AAAA;AADpC,GAAP;AAGD","sourcesContent":["import axios from 'axios';\n\n/*\n\nThe point of this file is to separate out the fetching of off-chain data\n\nThis file just serves as a placeholder for how that could potentially work\n\nright now the provider passed in will set some interal private variables,\nused to fetch specific data from the storage provider\n\n*/\n\nexport default function ujoStorage(provider) {\n  let storageProvider;\n  let endpoint;\n  let params;\n  if (!provider) storageProvider = 'ipfs' || provider.toLowerCase();\n\n  switch (storageProvider) {\n    case 'ipfs':\n      endpoint = 'https://ipfs.infura.io:5001';\n      params = 'api/v0/dag/get?arg';\n      break;\n    default:\n      endpoint = 'https://ipfs.infura.io:5001';\n      params = 'api/v0/dag/get?arg';\n  }\n  return {\n    fetchMetadataByQueryParameter: queryParam => axios.get(`${endpoint}/${params}=${queryParam}`),\n  };\n}\n"],"file":"ujoStorage.js"}