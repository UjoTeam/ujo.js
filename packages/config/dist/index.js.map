{"version":3,"sources":["../src/index.js"],"names":["oracle","Config","web3Provider","dataStorageProvider","opts","web3","Web3","storageProvider","test","TestOracle","USDETHOracle","Promise","resolve","reject","eth","net","getId","err","networkId","oracleAddress","oracleInstance","Contract","abi","methods","getUintPrice","call","exchangeRate","toString","getAccounts","accounts","getBlockNumber","result","txHash","getTransactionReceipt"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAEA;;AAEA,IAAIA,MAAJ;;IAEMC,M;;;AACJ,kBAAYC,YAAZ,EAA0BC,mBAA1B,EAA0D;AAAA,QAAXC,IAAW,uEAAJ,EAAI;AAAA;AACxD;AACA,SAAKC,IAAL,GAAY,IAAIC,YAAJ,CAASJ,YAAT,CAAZ;AACA,SAAKK,eAAL,GAAuB,yBAAWJ,mBAAX,CAAvB;AACAH,IAAAA,MAAM,GAAGI,IAAI,CAACI,IAAL,GAAYC,2BAAZ,GAAyBC,6BAAlC;AACD;;;;;;;;;;;;;;iDAGQ,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAA,KAAI,CAACR,IAAL,CAAUS,GAAV,CAAcC,GAAd,CAAkBC,KAAlB,CAAwB,UAACC,GAAD,EAAMC,SAAN,EAAoB;AAC1C,wBAAID,GAAJ,EAASJ,MAAM,CAACI,GAAD,CAAN,CAAT,KACKL,OAAO,CAAC,+BAAmBZ,MAAnB,EAA2BkB,SAA3B,CAAD,CAAP;AACN,mBAHD;AAID,iBALM,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDASA,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAA,MAAI,CAACR,IAAL,CAAUS,GAAV,CAAcC,GAAd,CAAkBC,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAwB,kBAAOC,GAAP,EAAYC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACtB,kCAAID,GAAJ,EAASJ,MAAM,CAACI,GAAD,CAAN;AADa;AAGdE,8BAAAA,aAHc,GAGE,+BAAmBnB,MAAnB,EAA2BkB,SAA3B,CAHF;AAIdE,8BAAAA,cAJc,GAIG,IAAI,MAAI,CAACf,IAAL,CAAUS,GAAV,CAAcO,QAAlB,CAA2BrB,MAAM,CAACsB,GAAlC,EAAuCH,aAAvC,CAJH;AAAA;AAAA,qCAKOC,cAAc,CAACG,OAAf,CAAuBC,YAAvB,GAAsCC,IAAtC,EALP;;AAAA;AAKdC,8BAAAA,YALc;AAMpBd,8BAAAA,OAAO,CAACc,YAAY,CAACC,QAAb,CAAsB,EAAtB,CAAD,CAAP;AANoB;AAAA;;AAAA;AAAA;AAAA;AAQpBd,8BAAAA,MAAM,cAAN;;AARoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAxB;;AAAA;AAAA;AAAA;AAAA;AAWD,iBAZM,C;;;;;;;;;;;;;;;QAeT;;;;kCACc;AAAA;;AACZ,aAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAA,MAAI,CAACR,IAAL,CAAUS,GAAV,CAAcc,WAAd,CAA0B,UAACX,GAAD,EAAMY,QAAN,EAAmB;AAC3C,cAAIZ,GAAJ,EAASJ,MAAM,CAACI,GAAD,CAAN,CAAT,KACKL,OAAO,CAACiB,QAAD,CAAP;AACN,SAHD;AAID,OALM,CAAP;AAMD,K,CAED;;;;iCACa;AAAA;;AACX,aAAO,IAAIlB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAA,MAAI,CAACR,IAAL,CAAUS,GAAV,CAAcC,GAAd,CAAkBC,KAAlB,CAAwB,UAACC,GAAD,EAAMC,SAAN,EAAoB;AAC1C,cAAID,GAAJ,EAASJ,MAAM,CAACI,GAAD,CAAN,CAAT,KACKL,OAAO,CAACM,SAAD,CAAP;AACN,SAHD;AAID,OALM,CAAP;AAMD;;;qCAEgB;AAAA;;AACf,aAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAA,MAAI,CAACR,IAAL,CAAUS,GAAV,CAAcgB,cAAd,CAA6B,UAACb,GAAD,EAAMc,MAAN,EAAiB;AAC5C,cAAId,GAAJ,EAASJ,MAAM,CAACI,GAAD,CAAN;AACTL,UAAAA,OAAO,CAACmB,MAAD,CAAP;AACD,SAHD;AAID,OALM,CAAP;AAMD;AAED;;;;;;;;;;;;kDAM4BC,M;;;;;;;kDACnB,IAAIrB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAA,MAAI,CAACR,IAAL,CAAUS,GAAV,CAAcmB,qBAAd,CAAoCD,MAApC,EAA4C,UAACf,GAAD,EAAMc,MAAN,EAAiB;AAC3D,wBAAId,GAAJ,EAASJ,MAAM,CAACI,GAAD,CAAN;AACTL,oBAAAA,OAAO,CAACmB,MAAD,CAAP;AACD,mBAHD;AAID,iBALM,C;;;;;;;;;;;;;;;;;;;;eASI9B,M","sourcesContent":["import Web3 from 'web3';\n\nimport { USDETHOracle, TestOracle } from '../../contracts-oracle';\nimport { getContractAddress } from '../../utils';\n\nimport ujoStorage from './ujoStorage';\n\nlet oracle;\n\nclass Config {\n  constructor(web3Provider, dataStorageProvider, opts = {}) {\n    // TODO - add network validations (rinkeby or mainnet)\n    this.web3 = new Web3(web3Provider);\n    this.storageProvider = ujoStorage(dataStorageProvider);\n    oracle = opts.test ? TestOracle : USDETHOracle;\n  }\n\n  async getOracleAddress() {\n    return new Promise((resolve, reject) => {\n      this.web3.eth.net.getId((err, networkId) => {\n        if (err) reject(err);\n        else resolve(getContractAddress(oracle, networkId));\n      });\n    });\n  }\n\n  async getExchangeRate() {\n    return new Promise((resolve, reject) => {\n      this.web3.eth.net.getId(async (err, networkId) => {\n        if (err) reject(err);\n        try {\n          const oracleAddress = getContractAddress(oracle, networkId);\n          const oracleInstance = new this.web3.eth.Contract(oracle.abi, oracleAddress);\n          const exchangeRate = await oracleInstance.methods.getUintPrice().call();\n          resolve(exchangeRate.toString(10));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    });\n  }\n\n  // return the accounts given by the provider\n  getAccounts() {\n    return new Promise((resolve, reject) => {\n      this.web3.eth.getAccounts((err, accounts) => {\n        if (err) reject(err);\n        else resolve(accounts);\n      });\n    });\n  }\n\n  // returns the network id\n  getNetwork() {\n    return new Promise((resolve, reject) => {\n      this.web3.eth.net.getId((err, networkId) => {\n        if (err) reject(err);\n        else resolve(networkId);\n      });\n    });\n  }\n\n  getBlockNumber() {\n    return new Promise((resolve, reject) => {\n      this.web3.eth.getBlockNumber((err, result) => {\n        if (err) reject(err);\n        resolve(result);\n      });\n    });\n  }\n\n  /**\n   * Determines the ethereum block to begin event log search from\n   *\n   * @param {string} param - txHash of the transaction to check.\n   * returns modified version of https://web3js.readthedocs.io/en/1.0/web3-eth.html#eth-gettransactionreceipt-return\n   */\n  async getTransactionReceipt(txHash) {\n    return new Promise((resolve, reject) => {\n      this.web3.eth.getTransactionReceipt(txHash, (err, result) => {\n        if (err) reject(err);\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport default Config;\n"],"file":"index.js"}