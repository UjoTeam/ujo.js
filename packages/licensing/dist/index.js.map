{"version":3,"sources":["../src/index.js"],"names":["Licensor","config","web3","getNetwork","networkId","licensingHandlerAddress","ETHUSDHandler","LicensingHandler","eth","Contract","abi","getOracleAddress","oracleAddress","cid","buyer","beneficiaries","amounts","notifiers","wei","utils","toWei","amountsInWei","map","amount","methods","pay","estimateGas","from","value","gasRequired","gas","send"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;IAEMA,Q;;;;;;;;;;;;iDACOC,M;;;;;AACT,qBAAKC,IAAL,GAAYD,MAAM,CAACC,IAAnB;;uBACuBD,MAAM,CAACE,UAAP,E;;;AAAvB,qBAAKC,S;AACL,qBAAKC,uBAAL,GAA+B,8BAAmBC,iCAAnB,EAAkC,KAAKF,SAAvC,CAA/B;AACA,qBAAKG,gBAAL,GAAwB,IAAI,KAAKL,IAAL,CAAUM,GAAV,CAAcC,QAAlB,CAA2BH,kCAAcI,GAAzC,EAA8C,KAAKL,uBAAnD,CAAxB;;uBAC2BJ,MAAM,CAACU,gBAAP,E;;;AAA3B,qBAAKC,a;;;;;;;;;;;;;;;;;;;;;kDAGOC,G,EAAKC,K,EAAOC,a,EAAeC,O,EAASC,S,EAAWT,G;;;;;;;;AAE3D,oBAAIA,GAAJ,EAASU,GAAG,GAAG,KAAKhB,IAAL,CAAUiB,KAAV,CAAgBC,KAAhB,CAAsBZ,GAAtB,EAA2B,OAA3B,CAAN,C,CAET;;AACMa,gBAAAA,Y,GAAeL,OAAO,CAACM,GAAR,CAAY,UAAAC,MAAM;AAAA,yBAAI,KAAI,CAACrB,IAAL,CAAUiB,KAAV,CAAgBC,KAAhB,CAAsBG,MAAtB,EAA8B,OAA9B,CAAJ;AAAA,iBAAlB,C;;uBAEK,KAAKhB,gBAAL,CAAsBiB,OAAtB,CACvBC,GADuB,CAEtBZ,GAFsB,EAGtB,KAAKD,aAHiB,EAGF;AACpBE,gBAAAA,KAJsB,EAIf;AACPC,gBAAAA,aALsB,EAKP;AACfM,gBAAAA,YANsB,EAMR;AACdJ,gBAAAA,SAPsB,CAOX;AAPW,kBASvBS,WATuB,CASX;AACXC,kBAAAA,IAAI,EAAEb,KADK;AAEXc,kBAAAA,KAAK,EAAEV;AAFI,iBATW,C;;;AAApBW,gBAAAA,W;AAcAC,gBAAAA,G,GAAM,oBAASD,WAAT,C;kDAEL,KAAKtB,gBAAL,CAAsBiB,OAAtB,CAA8BC,GAA9B,CAAkCZ,GAAlC,EAAuC,KAAKD,aAA5C,EAA2DE,KAA3D,EAAkEC,aAAlE,EAAiFM,YAAjF,EAA+F,EAA/F,EAAmGU,IAAnG,CAAwG;AAC7GJ,kBAAAA,IAAI,EAAEb,KADuG;AAE7Gc,kBAAAA,KAAK,EAAEV,GAFsG;AAG7GY,kBAAAA,GAAG,EAAHA;AAH6G,iBAAxG,C;;;;;;;;;;;;;;;;;;;;eAQI9B,Q","sourcesContent":["import { boostGas, getContractAddress } from '../../utils/dist';\nimport { ETHUSDHandler } from '../../contracts-licensing';\n\nclass Licensor {\n  async init(config) {\n    this.web3 = config.web3;\n    this.networkId = await config.getNetwork();\n    this.licensingHandlerAddress = getContractAddress(ETHUSDHandler, this.networkId);\n    this.LicensingHandler = new this.web3.eth.Contract(ETHUSDHandler.abi, this.licensingHandlerAddress);\n    this.oracleAddress = await config.getOracleAddress();\n  }\n\n  async license(cid, buyer, beneficiaries, amounts, notifiers, eth) {\n    let wei;\n    if (eth) wei = this.web3.utils.toWei(eth, 'ether');\n\n    // Convert ether amounts to wei\n    const amountsInWei = amounts.map(amount => this.web3.utils.toWei(amount, 'ether'));\n\n    const gasRequired = await this.LicensingHandler.methods\n      .pay(\n        cid,\n        this.oracleAddress, // which oracle to use for reference\n        buyer, // address\n        beneficiaries, // addresses\n        amountsInWei, // in wei\n        notifiers, // contract notifiers [none in this case]\n      )\n      .estimateGas({\n        from: buyer,\n        value: wei,\n      });\n\n    const gas = boostGas(gasRequired);\n\n    return this.LicensingHandler.methods.pay(cid, this.oracleAddress, buyer, beneficiaries, amountsInWei, []).send({\n      from: buyer,\n      value: wei,\n      gas,\n    });\n  }\n}\n\nexport default Licensor;\n"],"file":"index.js"}